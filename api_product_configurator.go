/*
Product Configurator Service

 The Product Configurator Service is a versatile platform designed to manage dynamic product configurations.  It enables the creation, updating, and management of product configurations through steps, options, and dependencies,  ensuring granular control over customization.  ## Core Components 1. **Configurators**    - Create and manage configurators linked to products.    - Support for configurator states (`ACTIVE`, `DRAFT`, etc.) and versioning.  2. **Steps**    - Define logical sequences to guide users through the configuration process.    - Include localized labels, descriptions, and selection rules.  3. **Options**    - Add and manage options available for each step.    - Support for visual content (`Swatch`) and configurable quantities.  4. **Dependencies**    - Create rules between options and steps to control dynamic interactions.    - Manage complex conditions across configurations.  5. **Matrices**    - Use matrices to handle prices, weights, and other properties.    - Support for dynamic customization based on user selections.  6. **Properties**    - Add custom attributes and properties to configurators.  7. **Configuration Management**    - Retrieve available or user-specific configurations.    - Create optimized configurations to enhance the user experience.  ## Key Features - **Security**: Authenticate every request with JWT, ensuring safety and reliability. - **Flexibility**: Bulk operations (create, update, delete) for steps, options, and dependencies. - **Scalability**: Suitable for large volumes of configurations and complex personalization scenarios. - **Backward Compatibility**: Version management to minimize the impact of changes on existing clients.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productconfigurator

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ProductConfiguratorAPI interface {

	/*
		ProductConfiguratorGetConfiguratorById Method for ProductConfiguratorGetConfiguratorById

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param tenantId
		@param configuratorId
		@return ApiProductConfiguratorGetConfiguratorByIdRequest
	*/
	ProductConfiguratorGetConfiguratorById(ctx context.Context, tenantId string, configuratorId string) ApiProductConfiguratorGetConfiguratorByIdRequest

	// ProductConfiguratorGetConfiguratorByIdExecute executes the request
	//  @return ProductconfiguratorconfiguratorEntity
	ProductConfiguratorGetConfiguratorByIdExecute(r ApiProductConfiguratorGetConfiguratorByIdRequest) (*ProductconfiguratorconfiguratorEntity, *http.Response, error)

	/*
		ProductConfiguratorGetProperty Method for ProductConfiguratorGetProperty

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param tenantId
		@param propertyId
		@return ApiProductConfiguratorGetPropertyRequest
	*/
	ProductConfiguratorGetProperty(ctx context.Context, tenantId string, propertyId string) ApiProductConfiguratorGetPropertyRequest

	// ProductConfiguratorGetPropertyExecute executes the request
	//  @return ProductconfiguratorpropertyEntity
	ProductConfiguratorGetPropertyExecute(r ApiProductConfiguratorGetPropertyRequest) (*ProductconfiguratorpropertyEntity, *http.Response, error)

	/*
		ProductConfiguratorListPropertiesByConfiguration Method for ProductConfiguratorListPropertiesByConfiguration

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param tenantId
		@param configuratorId
		@param pageSize
		@return ApiProductConfiguratorListPropertiesByConfigurationRequest
	*/
	ProductConfiguratorListPropertiesByConfiguration(ctx context.Context, tenantId string, configuratorId string, pageSize string) ApiProductConfiguratorListPropertiesByConfigurationRequest

	// ProductConfiguratorListPropertiesByConfigurationExecute executes the request
	//  @return PropertyListPropertiesByConfigurationResponse
	ProductConfiguratorListPropertiesByConfigurationExecute(r ApiProductConfiguratorListPropertiesByConfigurationRequest) (*PropertyListPropertiesByConfigurationResponse, *http.Response, error)
}

// ProductConfiguratorAPIService ProductConfiguratorAPI service
type ProductConfiguratorAPIService service

type ApiProductConfiguratorGetConfiguratorByIdRequest struct {
	ctx            context.Context
	ApiService     ProductConfiguratorAPI
	tenantId       string
	configuratorId string
}

func (r ApiProductConfiguratorGetConfiguratorByIdRequest) Execute() (*ProductconfiguratorconfiguratorEntity, *http.Response, error) {
	return r.ApiService.ProductConfiguratorGetConfiguratorByIdExecute(r)
}

/*
ProductConfiguratorGetConfiguratorById Method for ProductConfiguratorGetConfiguratorById

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenantId
	@param configuratorId
	@return ApiProductConfiguratorGetConfiguratorByIdRequest
*/
func (a *ProductConfiguratorAPIService) ProductConfiguratorGetConfiguratorById(ctx context.Context, tenantId string, configuratorId string) ApiProductConfiguratorGetConfiguratorByIdRequest {
	return ApiProductConfiguratorGetConfiguratorByIdRequest{
		ApiService:     a,
		ctx:            ctx,
		tenantId:       tenantId,
		configuratorId: configuratorId,
	}
}

// Execute executes the request
//
//	@return ProductconfiguratorconfiguratorEntity
func (a *ProductConfiguratorAPIService) ProductConfiguratorGetConfiguratorByIdExecute(r ApiProductConfiguratorGetConfiguratorByIdRequest) (*ProductconfiguratorconfiguratorEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProductconfiguratorconfiguratorEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductConfiguratorAPIService.ProductConfiguratorGetConfiguratorById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{tenantId}/configurator/{configuratorId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configuratorId"+"}", url.PathEscape(parameterValueToString(r.configuratorId, "configuratorId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductConfiguratorGetPropertyRequest struct {
	ctx        context.Context
	ApiService ProductConfiguratorAPI
	tenantId   string
	propertyId string
}

func (r ApiProductConfiguratorGetPropertyRequest) Execute() (*ProductconfiguratorpropertyEntity, *http.Response, error) {
	return r.ApiService.ProductConfiguratorGetPropertyExecute(r)
}

/*
ProductConfiguratorGetProperty Method for ProductConfiguratorGetProperty

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenantId
	@param propertyId
	@return ApiProductConfiguratorGetPropertyRequest
*/
func (a *ProductConfiguratorAPIService) ProductConfiguratorGetProperty(ctx context.Context, tenantId string, propertyId string) ApiProductConfiguratorGetPropertyRequest {
	return ApiProductConfiguratorGetPropertyRequest{
		ApiService: a,
		ctx:        ctx,
		tenantId:   tenantId,
		propertyId: propertyId,
	}
}

// Execute executes the request
//
//	@return ProductconfiguratorpropertyEntity
func (a *ProductConfiguratorAPIService) ProductConfiguratorGetPropertyExecute(r ApiProductConfiguratorGetPropertyRequest) (*ProductconfiguratorpropertyEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProductconfiguratorpropertyEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductConfiguratorAPIService.ProductConfiguratorGetProperty")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{tenantId}/property/{propertyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"propertyId"+"}", url.PathEscape(parameterValueToString(r.propertyId, "propertyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductConfiguratorListPropertiesByConfigurationRequest struct {
	ctx            context.Context
	ApiService     ProductConfiguratorAPI
	tenantId       string
	configuratorId string
	pageSize       string
	body           *ProductConfiguratorListPropertiesByConfigurationRequest
}

func (r ApiProductConfiguratorListPropertiesByConfigurationRequest) Body(body ProductConfiguratorListPropertiesByConfigurationRequest) ApiProductConfiguratorListPropertiesByConfigurationRequest {
	r.body = &body
	return r
}

func (r ApiProductConfiguratorListPropertiesByConfigurationRequest) Execute() (*PropertyListPropertiesByConfigurationResponse, *http.Response, error) {
	return r.ApiService.ProductConfiguratorListPropertiesByConfigurationExecute(r)
}

/*
ProductConfiguratorListPropertiesByConfiguration Method for ProductConfiguratorListPropertiesByConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tenantId
	@param configuratorId
	@param pageSize
	@return ApiProductConfiguratorListPropertiesByConfigurationRequest
*/
func (a *ProductConfiguratorAPIService) ProductConfiguratorListPropertiesByConfiguration(ctx context.Context, tenantId string, configuratorId string, pageSize string) ApiProductConfiguratorListPropertiesByConfigurationRequest {
	return ApiProductConfiguratorListPropertiesByConfigurationRequest{
		ApiService:     a,
		ctx:            ctx,
		tenantId:       tenantId,
		configuratorId: configuratorId,
		pageSize:       pageSize,
	}
}

// Execute executes the request
//
//	@return PropertyListPropertiesByConfigurationResponse
func (a *ProductConfiguratorAPIService) ProductConfiguratorListPropertiesByConfigurationExecute(r ApiProductConfiguratorListPropertiesByConfigurationRequest) (*PropertyListPropertiesByConfigurationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PropertyListPropertiesByConfigurationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductConfiguratorAPIService.ProductConfiguratorListPropertiesByConfiguration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{tenantId}/configurator/{configuratorId}/page-size/{pageSize}/properties"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", url.PathEscape(parameterValueToString(r.tenantId, "tenantId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"configuratorId"+"}", url.PathEscape(parameterValueToString(r.configuratorId, "configuratorId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pageSize"+"}", url.PathEscape(parameterValueToString(r.pageSize, "pageSize")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
