/*
Product Configurator Service

 The Product Configurator Service is a versatile platform designed to manage dynamic product configurations.  It enables the creation, updating, and management of product configurations through steps, options, and dependencies,  ensuring granular control over customization.  ## Core Components 1. **Configurators**    - Create and manage configurators linked to products.    - Support for configurator states (`ACTIVE`, `DRAFT`, etc.) and versioning.  2. **Steps**    - Define logical sequences to guide users through the configuration process.    - Include localized labels, descriptions, and selection rules.  3. **Options**    - Add and manage options available for each step.    - Support for visual content (`Swatch`) and configurable quantities.  4. **Dependencies**    - Create rules between options and steps to control dynamic interactions.    - Manage complex conditions across configurations.  5. **Matrices**    - Use matrices to handle prices, weights, and other properties.    - Support for dynamic customization based on user selections.  6. **Properties**    - Add custom attributes and properties to configurators.  7. **Configuration Management**    - Retrieve available or user-specific configurations.    - Create optimized configurations to enhance the user experience.  ## Key Features - **Security**: Authenticate every request with JWT, ensuring safety and reliability. - **Flexibility**: Bulk operations (create, update, delete) for steps, options, and dependencies. - **Scalability**: Suitable for large volumes of configurations and complex personalization scenarios. - **Backward Compatibility**: Version management to minimize the impact of changes on existing clients.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productconfigurator

import (
	"encoding/json"
)

// checks if the ConfigurationConfigurator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationConfigurator{}

// ConfigurationConfigurator struct for ConfigurationConfigurator
type ConfigurationConfigurator struct {
	Id                   *string                                `json:"id,omitempty"`
	Grn                  *string                                `json:"grn,omitempty"`
	Steps                []ProductconfiguratorconfigurationStep `json:"steps,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfigurationConfigurator ConfigurationConfigurator

// NewConfigurationConfigurator instantiates a new ConfigurationConfigurator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationConfigurator() *ConfigurationConfigurator {
	this := ConfigurationConfigurator{}
	return &this
}

// NewConfigurationConfiguratorWithDefaults instantiates a new ConfigurationConfigurator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationConfiguratorWithDefaults() *ConfigurationConfigurator {
	this := ConfigurationConfigurator{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationConfigurator) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationConfigurator) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationConfigurator) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigurationConfigurator) SetId(v string) {
	o.Id = &v
}

// GetGrn returns the Grn field value if set, zero value otherwise.
func (o *ConfigurationConfigurator) GetGrn() string {
	if o == nil || IsNil(o.Grn) {
		var ret string
		return ret
	}
	return *o.Grn
}

// GetGrnOk returns a tuple with the Grn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationConfigurator) GetGrnOk() (*string, bool) {
	if o == nil || IsNil(o.Grn) {
		return nil, false
	}
	return o.Grn, true
}

// HasGrn returns a boolean if a field has been set.
func (o *ConfigurationConfigurator) HasGrn() bool {
	if o != nil && !IsNil(o.Grn) {
		return true
	}

	return false
}

// SetGrn gets a reference to the given string and assigns it to the Grn field.
func (o *ConfigurationConfigurator) SetGrn(v string) {
	o.Grn = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *ConfigurationConfigurator) GetSteps() []ProductconfiguratorconfigurationStep {
	if o == nil || IsNil(o.Steps) {
		var ret []ProductconfiguratorconfigurationStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationConfigurator) GetStepsOk() ([]ProductconfiguratorconfigurationStep, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *ConfigurationConfigurator) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []ProductconfiguratorconfigurationStep and assigns it to the Steps field.
func (o *ConfigurationConfigurator) SetSteps(v []ProductconfiguratorconfigurationStep) {
	o.Steps = v
}

func (o ConfigurationConfigurator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationConfigurator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Grn) {
		toSerialize["grn"] = o.Grn
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigurationConfigurator) UnmarshalJSON(data []byte) (err error) {
	varConfigurationConfigurator := _ConfigurationConfigurator{}

	err = json.Unmarshal(data, &varConfigurationConfigurator)

	if err != nil {
		return err
	}

	*o = ConfigurationConfigurator(varConfigurationConfigurator)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "grn")
		delete(additionalProperties, "steps")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ConfigurationConfigurator) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ConfigurationConfigurator) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableConfigurationConfigurator struct {
	value *ConfigurationConfigurator
	isSet bool
}

func (v NullableConfigurationConfigurator) Get() *ConfigurationConfigurator {
	return v.value
}

func (v *NullableConfigurationConfigurator) Set(val *ConfigurationConfigurator) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationConfigurator) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationConfigurator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationConfigurator(val *ConfigurationConfigurator) *NullableConfigurationConfigurator {
	return &NullableConfigurationConfigurator{value: val, isSet: true}
}

func (v NullableConfigurationConfigurator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationConfigurator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
