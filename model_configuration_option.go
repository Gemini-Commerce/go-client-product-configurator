/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigurationOption struct for ConfigurationOption
type ConfigurationOption struct {
	Id *string `json:"id,omitempty"`
	Grn *string `json:"grn,omitempty"`
	Label *LocalisationLocalizedText `json:"label,omitempty"`
	Position *string `json:"position,omitempty"`
	Swatch *OptionSwatch `json:"swatch,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	OptionProperties []ConfigurationOptionProperty `json:"optionProperties,omitempty"`
}

// NewConfigurationOption instantiates a new ConfigurationOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationOption() *ConfigurationOption {
	this := ConfigurationOption{}
	return &this
}

// NewConfigurationOptionWithDefaults instantiates a new ConfigurationOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationOptionWithDefaults() *ConfigurationOption {
	this := ConfigurationOption{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConfigurationOption) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConfigurationOption) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ConfigurationOption) SetId(v string) {
	o.Id = &v
}

// GetGrn returns the Grn field value if set, zero value otherwise.
func (o *ConfigurationOption) GetGrn() string {
	if o == nil || isNil(o.Grn) {
		var ret string
		return ret
	}
	return *o.Grn
}

// GetGrnOk returns a tuple with the Grn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetGrnOk() (*string, bool) {
	if o == nil || isNil(o.Grn) {
    return nil, false
	}
	return o.Grn, true
}

// HasGrn returns a boolean if a field has been set.
func (o *ConfigurationOption) HasGrn() bool {
	if o != nil && !isNil(o.Grn) {
		return true
	}

	return false
}

// SetGrn gets a reference to the given string and assigns it to the Grn field.
func (o *ConfigurationOption) SetGrn(v string) {
	o.Grn = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ConfigurationOption) GetLabel() LocalisationLocalizedText {
	if o == nil || isNil(o.Label) {
		var ret LocalisationLocalizedText
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetLabelOk() (*LocalisationLocalizedText, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ConfigurationOption) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given LocalisationLocalizedText and assigns it to the Label field.
func (o *ConfigurationOption) SetLabel(v LocalisationLocalizedText) {
	o.Label = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ConfigurationOption) GetPosition() string {
	if o == nil || isNil(o.Position) {
		var ret string
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetPositionOk() (*string, bool) {
	if o == nil || isNil(o.Position) {
    return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ConfigurationOption) HasPosition() bool {
	if o != nil && !isNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given string and assigns it to the Position field.
func (o *ConfigurationOption) SetPosition(v string) {
	o.Position = &v
}

// GetSwatch returns the Swatch field value if set, zero value otherwise.
func (o *ConfigurationOption) GetSwatch() OptionSwatch {
	if o == nil || isNil(o.Swatch) {
		var ret OptionSwatch
		return ret
	}
	return *o.Swatch
}

// GetSwatchOk returns a tuple with the Swatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetSwatchOk() (*OptionSwatch, bool) {
	if o == nil || isNil(o.Swatch) {
    return nil, false
	}
	return o.Swatch, true
}

// HasSwatch returns a boolean if a field has been set.
func (o *ConfigurationOption) HasSwatch() bool {
	if o != nil && !isNil(o.Swatch) {
		return true
	}

	return false
}

// SetSwatch gets a reference to the given OptionSwatch and assigns it to the Swatch field.
func (o *ConfigurationOption) SetSwatch(v OptionSwatch) {
	o.Swatch = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ConfigurationOption) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
    return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ConfigurationOption) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ConfigurationOption) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetOptionProperties returns the OptionProperties field value if set, zero value otherwise.
func (o *ConfigurationOption) GetOptionProperties() []ConfigurationOptionProperty {
	if o == nil || isNil(o.OptionProperties) {
		var ret []ConfigurationOptionProperty
		return ret
	}
	return o.OptionProperties
}

// GetOptionPropertiesOk returns a tuple with the OptionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationOption) GetOptionPropertiesOk() ([]ConfigurationOptionProperty, bool) {
	if o == nil || isNil(o.OptionProperties) {
    return nil, false
	}
	return o.OptionProperties, true
}

// HasOptionProperties returns a boolean if a field has been set.
func (o *ConfigurationOption) HasOptionProperties() bool {
	if o != nil && !isNil(o.OptionProperties) {
		return true
	}

	return false
}

// SetOptionProperties gets a reference to the given []ConfigurationOptionProperty and assigns it to the OptionProperties field.
func (o *ConfigurationOption) SetOptionProperties(v []ConfigurationOptionProperty) {
	o.OptionProperties = v
}

func (o ConfigurationOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Grn) {
		toSerialize["grn"] = o.Grn
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !isNil(o.Swatch) {
		toSerialize["swatch"] = o.Swatch
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.OptionProperties) {
		toSerialize["optionProperties"] = o.OptionProperties
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationOption struct {
	value *ConfigurationOption
	isSet bool
}

func (v NullableConfigurationOption) Get() *ConfigurationOption {
	return v.value
}

func (v *NullableConfigurationOption) Set(val *ConfigurationOption) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationOption) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationOption(val *ConfigurationOption) *NullableConfigurationOption {
	return &NullableConfigurationOption{value: val, isSet: true}
}

func (v NullableConfigurationOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


