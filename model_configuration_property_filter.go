/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConfigurationPropertyFilter struct for ConfigurationPropertyFilter
type ConfigurationPropertyFilter struct {
	GenericProperty *ConfigurationPropertyFilterGenericProperty `json:"genericProperty,omitempty"`
	PriceProperty map[string]interface{} `json:"priceProperty,omitempty"`
	WeightProperty map[string]interface{} `json:"weightProperty,omitempty"`
}

// NewConfigurationPropertyFilter instantiates a new ConfigurationPropertyFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationPropertyFilter() *ConfigurationPropertyFilter {
	this := ConfigurationPropertyFilter{}
	return &this
}

// NewConfigurationPropertyFilterWithDefaults instantiates a new ConfigurationPropertyFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationPropertyFilterWithDefaults() *ConfigurationPropertyFilter {
	this := ConfigurationPropertyFilter{}
	return &this
}

// GetGenericProperty returns the GenericProperty field value if set, zero value otherwise.
func (o *ConfigurationPropertyFilter) GetGenericProperty() ConfigurationPropertyFilterGenericProperty {
	if o == nil || isNil(o.GenericProperty) {
		var ret ConfigurationPropertyFilterGenericProperty
		return ret
	}
	return *o.GenericProperty
}

// GetGenericPropertyOk returns a tuple with the GenericProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationPropertyFilter) GetGenericPropertyOk() (*ConfigurationPropertyFilterGenericProperty, bool) {
	if o == nil || isNil(o.GenericProperty) {
    return nil, false
	}
	return o.GenericProperty, true
}

// HasGenericProperty returns a boolean if a field has been set.
func (o *ConfigurationPropertyFilter) HasGenericProperty() bool {
	if o != nil && !isNil(o.GenericProperty) {
		return true
	}

	return false
}

// SetGenericProperty gets a reference to the given ConfigurationPropertyFilterGenericProperty and assigns it to the GenericProperty field.
func (o *ConfigurationPropertyFilter) SetGenericProperty(v ConfigurationPropertyFilterGenericProperty) {
	o.GenericProperty = &v
}

// GetPriceProperty returns the PriceProperty field value if set, zero value otherwise.
func (o *ConfigurationPropertyFilter) GetPriceProperty() map[string]interface{} {
	if o == nil || isNil(o.PriceProperty) {
		var ret map[string]interface{}
		return ret
	}
	return o.PriceProperty
}

// GetPricePropertyOk returns a tuple with the PriceProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationPropertyFilter) GetPricePropertyOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.PriceProperty) {
    return map[string]interface{}{}, false
	}
	return o.PriceProperty, true
}

// HasPriceProperty returns a boolean if a field has been set.
func (o *ConfigurationPropertyFilter) HasPriceProperty() bool {
	if o != nil && !isNil(o.PriceProperty) {
		return true
	}

	return false
}

// SetPriceProperty gets a reference to the given map[string]interface{} and assigns it to the PriceProperty field.
func (o *ConfigurationPropertyFilter) SetPriceProperty(v map[string]interface{}) {
	o.PriceProperty = v
}

// GetWeightProperty returns the WeightProperty field value if set, zero value otherwise.
func (o *ConfigurationPropertyFilter) GetWeightProperty() map[string]interface{} {
	if o == nil || isNil(o.WeightProperty) {
		var ret map[string]interface{}
		return ret
	}
	return o.WeightProperty
}

// GetWeightPropertyOk returns a tuple with the WeightProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationPropertyFilter) GetWeightPropertyOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.WeightProperty) {
    return map[string]interface{}{}, false
	}
	return o.WeightProperty, true
}

// HasWeightProperty returns a boolean if a field has been set.
func (o *ConfigurationPropertyFilter) HasWeightProperty() bool {
	if o != nil && !isNil(o.WeightProperty) {
		return true
	}

	return false
}

// SetWeightProperty gets a reference to the given map[string]interface{} and assigns it to the WeightProperty field.
func (o *ConfigurationPropertyFilter) SetWeightProperty(v map[string]interface{}) {
	o.WeightProperty = v
}

func (o ConfigurationPropertyFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GenericProperty) {
		toSerialize["genericProperty"] = o.GenericProperty
	}
	if !isNil(o.PriceProperty) {
		toSerialize["priceProperty"] = o.PriceProperty
	}
	if !isNil(o.WeightProperty) {
		toSerialize["weightProperty"] = o.WeightProperty
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationPropertyFilter struct {
	value *ConfigurationPropertyFilter
	isSet bool
}

func (v NullableConfigurationPropertyFilter) Get() *ConfigurationPropertyFilter {
	return v.value
}

func (v *NullableConfigurationPropertyFilter) Set(val *ConfigurationPropertyFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationPropertyFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationPropertyFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationPropertyFilter(val *ConfigurationPropertyFilter) *NullableConfigurationPropertyFilter {
	return &NullableConfigurationPropertyFilter{value: val, isSet: true}
}

func (v NullableConfigurationPropertyFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationPropertyFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


