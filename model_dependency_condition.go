/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DependencyCondition struct for DependencyCondition
type DependencyCondition struct {
	OptionIds []string `json:"optionIds,omitempty"`
	Conditions []DependencyCondition `json:"conditions,omitempty"`
	Type *ProductconfiguratordependencyType `json:"type,omitempty"`
}

// NewDependencyCondition instantiates a new DependencyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependencyCondition() *DependencyCondition {
	this := DependencyCondition{}
	var type_ ProductconfiguratordependencyType = PRODUCTCONFIGURATORDEPENDENCYTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewDependencyConditionWithDefaults instantiates a new DependencyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependencyConditionWithDefaults() *DependencyCondition {
	this := DependencyCondition{}
	var type_ ProductconfiguratordependencyType = PRODUCTCONFIGURATORDEPENDENCYTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetOptionIds returns the OptionIds field value if set, zero value otherwise.
func (o *DependencyCondition) GetOptionIds() []string {
	if o == nil || isNil(o.OptionIds) {
		var ret []string
		return ret
	}
	return o.OptionIds
}

// GetOptionIdsOk returns a tuple with the OptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetOptionIdsOk() ([]string, bool) {
	if o == nil || isNil(o.OptionIds) {
    return nil, false
	}
	return o.OptionIds, true
}

// HasOptionIds returns a boolean if a field has been set.
func (o *DependencyCondition) HasOptionIds() bool {
	if o != nil && !isNil(o.OptionIds) {
		return true
	}

	return false
}

// SetOptionIds gets a reference to the given []string and assigns it to the OptionIds field.
func (o *DependencyCondition) SetOptionIds(v []string) {
	o.OptionIds = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DependencyCondition) GetConditions() []DependencyCondition {
	if o == nil || isNil(o.Conditions) {
		var ret []DependencyCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetConditionsOk() ([]DependencyCondition, bool) {
	if o == nil || isNil(o.Conditions) {
    return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DependencyCondition) HasConditions() bool {
	if o != nil && !isNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DependencyCondition and assigns it to the Conditions field.
func (o *DependencyCondition) SetConditions(v []DependencyCondition) {
	o.Conditions = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DependencyCondition) GetType() ProductconfiguratordependencyType {
	if o == nil || isNil(o.Type) {
		var ret ProductconfiguratordependencyType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetTypeOk() (*ProductconfiguratordependencyType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DependencyCondition) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProductconfiguratordependencyType and assigns it to the Type field.
func (o *DependencyCondition) SetType(v ProductconfiguratordependencyType) {
	o.Type = &v
}

func (o DependencyCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OptionIds) {
		toSerialize["optionIds"] = o.OptionIds
	}
	if !isNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableDependencyCondition struct {
	value *DependencyCondition
	isSet bool
}

func (v NullableDependencyCondition) Get() *DependencyCondition {
	return v.value
}

func (v *NullableDependencyCondition) Set(val *DependencyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDependencyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDependencyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependencyCondition(val *DependencyCondition) *NullableDependencyCondition {
	return &NullableDependencyCondition{value: val, isSet: true}
}

func (v NullableDependencyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependencyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


