/*
Product Configurator Service

## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini_Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini_commerce.com](mailto:info@gemini_commerce.com) and we will get back to you.

API version: v1
Contact: info@gemini_commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi_generator.tech); DO NOT EDIT.

package productconfigurator

import (
	"encoding/json"
)

// checks if the DependencyCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DependencyCondition{}

// DependencyCondition struct for DependencyCondition
type DependencyCondition struct {
	OptionIds            []string                           `json:"optionIds,omitempty"`
	Conditions           []DependencyCondition              `json:"conditions,omitempty"`
	Type                 *ProductconfiguratordependencyType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DependencyCondition DependencyCondition

// NewDependencyCondition instantiates a new DependencyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependencyCondition() *DependencyCondition {
	this := DependencyCondition{}
	var type_ ProductconfiguratordependencyType = PRODUCTCONFIGURATORDEPENDENCYTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewDependencyConditionWithDefaults instantiates a new DependencyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependencyConditionWithDefaults() *DependencyCondition {
	this := DependencyCondition{}
	var type_ ProductconfiguratordependencyType = PRODUCTCONFIGURATORDEPENDENCYTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetOptionIds returns the OptionIds field value if set, zero value otherwise.
func (o *DependencyCondition) GetOptionIds() []string {
	if o == nil || IsNil(o.OptionIds) {
		var ret []string
		return ret
	}
	return o.OptionIds
}

// GetOptionIdsOk returns a tuple with the OptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetOptionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OptionIds) {
		return nil, false
	}
	return o.OptionIds, true
}

// HasOptionIds returns a boolean if a field has been set.
func (o *DependencyCondition) HasOptionIds() bool {
	if o != nil && !IsNil(o.OptionIds) {
		return true
	}

	return false
}

// SetOptionIds gets a reference to the given []string and assigns it to the OptionIds field.
func (o *DependencyCondition) SetOptionIds(v []string) {
	o.OptionIds = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DependencyCondition) GetConditions() []DependencyCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []DependencyCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetConditionsOk() ([]DependencyCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DependencyCondition) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DependencyCondition and assigns it to the Conditions field.
func (o *DependencyCondition) SetConditions(v []DependencyCondition) {
	o.Conditions = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DependencyCondition) GetType() ProductconfiguratordependencyType {
	if o == nil || IsNil(o.Type) {
		var ret ProductconfiguratordependencyType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetTypeOk() (*ProductconfiguratordependencyType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DependencyCondition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProductconfiguratordependencyType and assigns it to the Type field.
func (o *DependencyCondition) SetType(v ProductconfiguratordependencyType) {
	o.Type = &v
}

func (o DependencyCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DependencyCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OptionIds) {
		toSerialize["optionIds"] = o.OptionIds
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DependencyCondition) UnmarshalJSON(data []byte) (err error) {
	varDependencyCondition := _DependencyCondition{}

	err = json.Unmarshal(data, &varDependencyCondition)

	if err != nil {
		return err
	}

	*o = DependencyCondition(varDependencyCondition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "optionIds")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well_known types
func (o *DependencyCondition) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well_known types
func (o *DependencyCondition) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableDependencyCondition struct {
	value *DependencyCondition
	isSet bool
}

func (v NullableDependencyCondition) Get() *DependencyCondition {
	return v.value
}

func (v *NullableDependencyCondition) Set(val *DependencyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDependencyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDependencyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependencyCondition(val *DependencyCondition) *NullableDependencyCondition {
	return &NullableDependencyCondition{value: val, isSet: true}
}

func (v NullableDependencyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependencyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
