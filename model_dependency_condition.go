/*
Product Configurator Service

 The Product Configurator Service is a versatile platform designed to manage dynamic product configurations.  It enables the creation, updating, and management of product configurations through steps, options, and dependencies,  ensuring granular control over customization.  ## Core Components 1. **Configurators**    - Create and manage configurators linked to products.    - Support for configurator states (`ACTIVE`, `DRAFT`, etc.) and versioning.  2. **Steps**    - Define logical sequences to guide users through the configuration process.    - Include localized labels, descriptions, and selection rules.  3. **Options**    - Add and manage options available for each step.    - Support for visual content (`Swatch`) and configurable quantities.  4. **Dependencies**    - Create rules between options and steps to control dynamic interactions.    - Manage complex conditions across configurations.  5. **Matrices**    - Use matrices to handle prices, weights, and other properties.    - Support for dynamic customization based on user selections.  6. **Properties**    - Add custom attributes and properties to configurators.  7. **Configuration Management**    - Retrieve available or user-specific configurations.    - Create optimized configurations to enhance the user experience.  ## Key Features - **Security**: Authenticate every request with JWT, ensuring safety and reliability. - **Flexibility**: Bulk operations (create, update, delete) for steps, options, and dependencies. - **Scalability**: Suitable for large volumes of configurations and complex personalization scenarios. - **Backward Compatibility**: Version management to minimize the impact of changes on existing clients.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productconfigurator

import (
	"encoding/json"
)

// checks if the DependencyCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DependencyCondition{}

// DependencyCondition struct for DependencyCondition
type DependencyCondition struct {
	OptionIds            []string                           `json:"optionIds,omitempty"`
	Conditions           []DependencyCondition              `json:"conditions,omitempty"`
	Type                 *ProductconfiguratordependencyType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DependencyCondition DependencyCondition

// NewDependencyCondition instantiates a new DependencyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependencyCondition() *DependencyCondition {
	this := DependencyCondition{}
	var type_ ProductconfiguratordependencyType = PRODUCTCONFIGURATORDEPENDENCYTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewDependencyConditionWithDefaults instantiates a new DependencyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependencyConditionWithDefaults() *DependencyCondition {
	this := DependencyCondition{}
	var type_ ProductconfiguratordependencyType = PRODUCTCONFIGURATORDEPENDENCYTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetOptionIds returns the OptionIds field value if set, zero value otherwise.
func (o *DependencyCondition) GetOptionIds() []string {
	if o == nil || IsNil(o.OptionIds) {
		var ret []string
		return ret
	}
	return o.OptionIds
}

// GetOptionIdsOk returns a tuple with the OptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetOptionIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.OptionIds) {
		return nil, false
	}
	return o.OptionIds, true
}

// HasOptionIds returns a boolean if a field has been set.
func (o *DependencyCondition) IsSetOptionIds() bool {
	if o != nil && !IsNil(o.OptionIds) {
		return true
	}

	return false
}

// SetOptionIds gets a reference to the given []string and assigns it to the OptionIds field.
func (o *DependencyCondition) SetOptionIds(v []string) {
	o.OptionIds = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DependencyCondition) GetConditions() []DependencyCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []DependencyCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetConditionsOk() ([]DependencyCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DependencyCondition) IsSetConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DependencyCondition and assigns it to the Conditions field.
func (o *DependencyCondition) SetConditions(v []DependencyCondition) {
	o.Conditions = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DependencyCondition) GetType() ProductconfiguratordependencyType {
	if o == nil || IsNil(o.Type) {
		var ret ProductconfiguratordependencyType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DependencyCondition) GetTypeOk() (*ProductconfiguratordependencyType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DependencyCondition) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ProductconfiguratordependencyType and assigns it to the Type field.
func (o *DependencyCondition) SetType(v ProductconfiguratordependencyType) {
	o.Type = &v
}

func (o DependencyCondition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DependencyCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OptionIds) {
		toSerialize["optionIds"] = o.OptionIds
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DependencyCondition) UnmarshalJSON(data []byte) (err error) {
	varDependencyCondition := _DependencyCondition{}

	err = json.Unmarshal(data, &varDependencyCondition)

	if err != nil {
		return err
	}

	*o = DependencyCondition(varDependencyCondition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "optionIds")
		delete(additionalProperties, "conditions")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *DependencyCondition) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *DependencyCondition) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableDependencyCondition struct {
	value *DependencyCondition
	isSet bool
}

func (v NullableDependencyCondition) Get() *DependencyCondition {
	return v.value
}

func (v *NullableDependencyCondition) Set(val *DependencyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDependencyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDependencyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependencyCondition(val *DependencyCondition) *NullableDependencyCondition {
	return &NullableDependencyCondition{value: val, isSet: true}
}

func (v NullableDependencyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependencyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
