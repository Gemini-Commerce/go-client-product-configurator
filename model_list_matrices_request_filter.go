/*
Product Configurator Service

 The Product Configurator Service is a versatile platform designed to manage dynamic product configurations.  It enables the creation, updating, and management of product configurations through steps, options, and dependencies,  ensuring granular control over customization.  ## Core Components 1. **Configurators**    - Create and manage configurators linked to products.    - Support for configurator states (`ACTIVE`, `DRAFT`, etc.) and versioning.  2. **Steps**    - Define logical sequences to guide users through the configuration process.    - Include localized labels, descriptions, and selection rules.  3. **Options**    - Add and manage options available for each step.    - Support for visual content (`Swatch`) and configurable quantities.  4. **Dependencies**    - Create rules between options and steps to control dynamic interactions.    - Manage complex conditions across configurations.  5. **Matrices**    - Use matrices to handle prices, weights, and other properties.    - Support for dynamic customization based on user selections.  6. **Properties**    - Add custom attributes and properties to configurators.  7. **Configuration Management**    - Retrieve available or user-specific configurations.    - Create optimized configurations to enhance the user experience.  ## Key Features - **Security**: Authenticate every request with JWT, ensuring safety and reliability. - **Flexibility**: Bulk operations (create, update, delete) for steps, options, and dependencies. - **Scalability**: Suitable for large volumes of configurations and complex personalization scenarios. - **Backward Compatibility**: Version management to minimize the impact of changes on existing clients.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productconfigurator

import (
	"encoding/json"
)

// checks if the ListMatricesRequestFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListMatricesRequestFilter{}

// ListMatricesRequestFilter struct for ListMatricesRequestFilter
type ListMatricesRequestFilter struct {
	PropertyType         []ProductconfiguratorPropertyType `json:"propertyType,omitempty"`
	PropertyKey          []string                          `json:"propertyKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListMatricesRequestFilter ListMatricesRequestFilter

// NewListMatricesRequestFilter instantiates a new ListMatricesRequestFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListMatricesRequestFilter() *ListMatricesRequestFilter {
	this := ListMatricesRequestFilter{}
	return &this
}

// NewListMatricesRequestFilterWithDefaults instantiates a new ListMatricesRequestFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListMatricesRequestFilterWithDefaults() *ListMatricesRequestFilter {
	this := ListMatricesRequestFilter{}
	return &this
}

// GetPropertyType returns the PropertyType field value if set, zero value otherwise.
func (o *ListMatricesRequestFilter) GetPropertyType() []ProductconfiguratorPropertyType {
	if o == nil || IsNil(o.PropertyType) {
		var ret []ProductconfiguratorPropertyType
		return ret
	}
	return o.PropertyType
}

// GetPropertyTypeOk returns a tuple with the PropertyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMatricesRequestFilter) GetPropertyTypeOk() ([]ProductconfiguratorPropertyType, bool) {
	if o == nil || IsNil(o.PropertyType) {
		return nil, false
	}
	return o.PropertyType, true
}

// HasPropertyType returns a boolean if a field has been set.
func (o *ListMatricesRequestFilter) IsSetPropertyType() bool {
	if o != nil && !IsNil(o.PropertyType) {
		return true
	}

	return false
}

// SetPropertyType gets a reference to the given []ProductconfiguratorPropertyType and assigns it to the PropertyType field.
func (o *ListMatricesRequestFilter) SetPropertyType(v []ProductconfiguratorPropertyType) {
	o.PropertyType = v
}

// GetPropertyKey returns the PropertyKey field value if set, zero value otherwise.
func (o *ListMatricesRequestFilter) GetPropertyKey() []string {
	if o == nil || IsNil(o.PropertyKey) {
		var ret []string
		return ret
	}
	return o.PropertyKey
}

// GetPropertyKeyOk returns a tuple with the PropertyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMatricesRequestFilter) GetPropertyKeyOk() ([]string, bool) {
	if o == nil || IsNil(o.PropertyKey) {
		return nil, false
	}
	return o.PropertyKey, true
}

// HasPropertyKey returns a boolean if a field has been set.
func (o *ListMatricesRequestFilter) IsSetPropertyKey() bool {
	if o != nil && !IsNil(o.PropertyKey) {
		return true
	}

	return false
}

// SetPropertyKey gets a reference to the given []string and assigns it to the PropertyKey field.
func (o *ListMatricesRequestFilter) SetPropertyKey(v []string) {
	o.PropertyKey = v
}

func (o ListMatricesRequestFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListMatricesRequestFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyType) {
		toSerialize["propertyType"] = o.PropertyType
	}
	if !IsNil(o.PropertyKey) {
		toSerialize["propertyKey"] = o.PropertyKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListMatricesRequestFilter) UnmarshalJSON(data []byte) (err error) {
	varListMatricesRequestFilter := _ListMatricesRequestFilter{}

	err = json.Unmarshal(data, &varListMatricesRequestFilter)

	if err != nil {
		return err
	}

	*o = ListMatricesRequestFilter(varListMatricesRequestFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "propertyType")
		delete(additionalProperties, "propertyKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ListMatricesRequestFilter) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ListMatricesRequestFilter) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableListMatricesRequestFilter struct {
	value *ListMatricesRequestFilter
	isSet bool
}

func (v NullableListMatricesRequestFilter) Get() *ListMatricesRequestFilter {
	return v.value
}

func (v *NullableListMatricesRequestFilter) Set(val *ListMatricesRequestFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableListMatricesRequestFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableListMatricesRequestFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMatricesRequestFilter(val *ListMatricesRequestFilter) *NullableListMatricesRequestFilter {
	return &NullableListMatricesRequestFilter{value: val, isSet: true}
}

func (v NullableListMatricesRequestFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMatricesRequestFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
