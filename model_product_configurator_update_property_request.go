/*
Product Configurator Service

## Introduction  This comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.  ## Quick Start  Get up and running in no time! Follow these steps to kickstart your integration:  1. **Authentication:** Obtain your integration JWT to authenticate your requests. 2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language. 3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.  ## Integration  ### API Overview  Our RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.  ### Client Libraries  To expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).  ### Authentication  Security is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.  ## Configuration Management  ### Configurator Lifecycle  Understand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.  ### Steps and Options  Configure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.  ### Matrices  Delve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.  ### Price Management  Unleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.  ## Security  Your data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.  ## Backward Compatibility  Stay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.  ## Developer Support  Have questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product_configurator

import (
	"encoding/json"
)

// checks if the ProductConfiguratorUpdatePropertyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductConfiguratorUpdatePropertyRequest{}

// ProductConfiguratorUpdatePropertyRequest struct for ProductConfiguratorUpdatePropertyRequest
type ProductConfiguratorUpdatePropertyRequest struct {
	MatrixId *string `json:"matrixId,omitempty"`
	Payload *ProductconfiguratorpropertyUpdatePayload `json:"payload,omitempty"`
	PayloadMask *string `json:"payloadMask,omitempty"`
}

// NewProductConfiguratorUpdatePropertyRequest instantiates a new ProductConfiguratorUpdatePropertyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductConfiguratorUpdatePropertyRequest() *ProductConfiguratorUpdatePropertyRequest {
	this := ProductConfiguratorUpdatePropertyRequest{}
	return &this
}

// NewProductConfiguratorUpdatePropertyRequestWithDefaults instantiates a new ProductConfiguratorUpdatePropertyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductConfiguratorUpdatePropertyRequestWithDefaults() *ProductConfiguratorUpdatePropertyRequest {
	this := ProductConfiguratorUpdatePropertyRequest{}
	return &this
}

// GetMatrixId returns the MatrixId field value if set, zero value otherwise.
func (o *ProductConfiguratorUpdatePropertyRequest) GetMatrixId() string {
	if o == nil || IsNil(o.MatrixId) {
		var ret string
		return ret
	}
	return *o.MatrixId
}

// GetMatrixIdOk returns a tuple with the MatrixId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductConfiguratorUpdatePropertyRequest) GetMatrixIdOk() (*string, bool) {
	if o == nil || IsNil(o.MatrixId) {
		return nil, false
	}
	return o.MatrixId, true
}

// HasMatrixId returns a boolean if a field has been set.
func (o *ProductConfiguratorUpdatePropertyRequest) HasMatrixId() bool {
	if o != nil && !IsNil(o.MatrixId) {
		return true
	}

	return false
}

// SetMatrixId gets a reference to the given string and assigns it to the MatrixId field.
func (o *ProductConfiguratorUpdatePropertyRequest) SetMatrixId(v string) {
	o.MatrixId = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *ProductConfiguratorUpdatePropertyRequest) GetPayload() ProductconfiguratorpropertyUpdatePayload {
	if o == nil || IsNil(o.Payload) {
		var ret ProductconfiguratorpropertyUpdatePayload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductConfiguratorUpdatePropertyRequest) GetPayloadOk() (*ProductconfiguratorpropertyUpdatePayload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *ProductConfiguratorUpdatePropertyRequest) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given ProductconfiguratorpropertyUpdatePayload and assigns it to the Payload field.
func (o *ProductConfiguratorUpdatePropertyRequest) SetPayload(v ProductconfiguratorpropertyUpdatePayload) {
	o.Payload = &v
}

// GetPayloadMask returns the PayloadMask field value if set, zero value otherwise.
func (o *ProductConfiguratorUpdatePropertyRequest) GetPayloadMask() string {
	if o == nil || IsNil(o.PayloadMask) {
		var ret string
		return ret
	}
	return *o.PayloadMask
}

// GetPayloadMaskOk returns a tuple with the PayloadMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductConfiguratorUpdatePropertyRequest) GetPayloadMaskOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadMask) {
		return nil, false
	}
	return o.PayloadMask, true
}

// HasPayloadMask returns a boolean if a field has been set.
func (o *ProductConfiguratorUpdatePropertyRequest) HasPayloadMask() bool {
	if o != nil && !IsNil(o.PayloadMask) {
		return true
	}

	return false
}

// SetPayloadMask gets a reference to the given string and assigns it to the PayloadMask field.
func (o *ProductConfiguratorUpdatePropertyRequest) SetPayloadMask(v string) {
	o.PayloadMask = &v
}

func (o ProductConfiguratorUpdatePropertyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductConfiguratorUpdatePropertyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatrixId) {
		toSerialize["matrixId"] = o.MatrixId
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.PayloadMask) {
		toSerialize["payloadMask"] = o.PayloadMask
	}
	return toSerialize, nil
}

type NullableProductConfiguratorUpdatePropertyRequest struct {
	value *ProductConfiguratorUpdatePropertyRequest
	isSet bool
}

func (v NullableProductConfiguratorUpdatePropertyRequest) Get() *ProductConfiguratorUpdatePropertyRequest {
	return v.value
}

func (v *NullableProductConfiguratorUpdatePropertyRequest) Set(val *ProductConfiguratorUpdatePropertyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProductConfiguratorUpdatePropertyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProductConfiguratorUpdatePropertyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductConfiguratorUpdatePropertyRequest(val *ProductConfiguratorUpdatePropertyRequest) *NullableProductConfiguratorUpdatePropertyRequest {
	return &NullableProductConfiguratorUpdatePropertyRequest{value: val, isSet: true}
}

func (v NullableProductConfiguratorUpdatePropertyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductConfiguratorUpdatePropertyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


