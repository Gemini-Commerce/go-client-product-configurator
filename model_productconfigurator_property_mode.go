/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProductconfiguratorPropertyMode the model 'ProductconfiguratorPropertyMode'
type ProductconfiguratorPropertyMode string

// List of productconfiguratorPropertyMode
const (
	PRODUCTCONFIGURATORPROPERTYMODE_UNKNOWN ProductconfiguratorPropertyMode = "PROPERTY_MODE_UNKNOWN"
	PRODUCTCONFIGURATORPROPERTYMODE_FINAL ProductconfiguratorPropertyMode = "PROPERTY_MODE_FINAL"
	PRODUCTCONFIGURATORPROPERTYMODE_INCREMENTAL ProductconfiguratorPropertyMode = "PROPERTY_MODE_INCREMENTAL"
)

// All allowed values of ProductconfiguratorPropertyMode enum
var AllowedProductconfiguratorPropertyModeEnumValues = []ProductconfiguratorPropertyMode{
	"PROPERTY_MODE_UNKNOWN",
	"PROPERTY_MODE_FINAL",
	"PROPERTY_MODE_INCREMENTAL",
}

func (v *ProductconfiguratorPropertyMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductconfiguratorPropertyMode(value)
	for _, existing := range AllowedProductconfiguratorPropertyModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductconfiguratorPropertyMode", value)
}

// NewProductconfiguratorPropertyModeFromValue returns a pointer to a valid ProductconfiguratorPropertyMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductconfiguratorPropertyModeFromValue(v string) (*ProductconfiguratorPropertyMode, error) {
	ev := ProductconfiguratorPropertyMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductconfiguratorPropertyMode: valid values are %v", v, AllowedProductconfiguratorPropertyModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductconfiguratorPropertyMode) IsValid() bool {
	for _, existing := range AllowedProductconfiguratorPropertyModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to productconfiguratorPropertyMode value
func (v ProductconfiguratorPropertyMode) Ptr() *ProductconfiguratorPropertyMode {
	return &v
}

type NullableProductconfiguratorPropertyMode struct {
	value *ProductconfiguratorPropertyMode
	isSet bool
}

func (v NullableProductconfiguratorPropertyMode) Get() *ProductconfiguratorPropertyMode {
	return v.value
}

func (v *NullableProductconfiguratorPropertyMode) Set(val *ProductconfiguratorPropertyMode) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratorPropertyMode) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratorPropertyMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratorPropertyMode(val *ProductconfiguratorPropertyMode) *NullableProductconfiguratorPropertyMode {
	return &NullableProductconfiguratorPropertyMode{value: val, isSet: true}
}

func (v NullableProductconfiguratorPropertyMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratorPropertyMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

