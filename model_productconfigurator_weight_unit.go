/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProductconfiguratorWeightUnit the model 'ProductconfiguratorWeightUnit'
type ProductconfiguratorWeightUnit string

// List of productconfiguratorWeightUnit
const (
	PRODUCTCONFIGURATORWEIGHTUNIT_UNKNOWN ProductconfiguratorWeightUnit = "WEIGHT_UNIT_UNKNOWN"
	PRODUCTCONFIGURATORWEIGHTUNIT_KILOGRAM ProductconfiguratorWeightUnit = "WEIGHT_UNIT_KILOGRAM"
	PRODUCTCONFIGURATORWEIGHTUNIT_POUND ProductconfiguratorWeightUnit = "WEIGHT_UNIT_POUND"
)

// All allowed values of ProductconfiguratorWeightUnit enum
var AllowedProductconfiguratorWeightUnitEnumValues = []ProductconfiguratorWeightUnit{
	"WEIGHT_UNIT_UNKNOWN",
	"WEIGHT_UNIT_KILOGRAM",
	"WEIGHT_UNIT_POUND",
}

func (v *ProductconfiguratorWeightUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductconfiguratorWeightUnit(value)
	for _, existing := range AllowedProductconfiguratorWeightUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductconfiguratorWeightUnit", value)
}

// NewProductconfiguratorWeightUnitFromValue returns a pointer to a valid ProductconfiguratorWeightUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductconfiguratorWeightUnitFromValue(v string) (*ProductconfiguratorWeightUnit, error) {
	ev := ProductconfiguratorWeightUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductconfiguratorWeightUnit: valid values are %v", v, AllowedProductconfiguratorWeightUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductconfiguratorWeightUnit) IsValid() bool {
	for _, existing := range AllowedProductconfiguratorWeightUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to productconfiguratorWeightUnit value
func (v ProductconfiguratorWeightUnit) Ptr() *ProductconfiguratorWeightUnit {
	return &v
}

type NullableProductconfiguratorWeightUnit struct {
	value *ProductconfiguratorWeightUnit
	isSet bool
}

func (v NullableProductconfiguratorWeightUnit) Get() *ProductconfiguratorWeightUnit {
	return v.value
}

func (v *NullableProductconfiguratorWeightUnit) Set(val *ProductconfiguratorWeightUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratorWeightUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratorWeightUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratorWeightUnit(val *ProductconfiguratorWeightUnit) *NullableProductconfiguratorWeightUnit {
	return &NullableProductconfiguratorWeightUnit{value: val, isSet: true}
}

func (v NullableProductconfiguratorWeightUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratorWeightUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

