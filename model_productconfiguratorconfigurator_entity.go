/*
Product Configurator Service

 The Product Configurator Service is a versatile platform designed to manage dynamic product configurations.  It enables the creation, updating, and management of product configurations through steps, options, and dependencies,  ensuring granular control over customization.  ## Core Components 1. **Configurators**    - Create and manage configurators linked to products.    - Support for configurator states (`ACTIVE`, `DRAFT`, etc.) and versioning.  2. **Steps**    - Define logical sequences to guide users through the configuration process.    - Include localized labels, descriptions, and selection rules.  3. **Options**    - Add and manage options available for each step.    - Support for visual content (`Swatch`) and configurable quantities.  4. **Dependencies**    - Create rules between options and steps to control dynamic interactions.    - Manage complex conditions across configurations.  5. **Matrices**    - Use matrices to handle prices, weights, and other properties.    - Support for dynamic customization based on user selections.  6. **Properties**    - Add custom attributes and properties to configurators.  7. **Configuration Management**    - Retrieve available or user-specific configurations.    - Create optimized configurations to enhance the user experience.  ## Key Features - **Security**: Authenticate every request with JWT, ensuring safety and reliability. - **Flexibility**: Bulk operations (create, update, delete) for steps, options, and dependencies. - **Scalability**: Suitable for large volumes of configurations and complex personalization scenarios. - **Backward Compatibility**: Version management to minimize the impact of changes on existing clients.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productconfigurator

import (
	"encoding/json"
	"time"
)

// checks if the ProductconfiguratorconfiguratorEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductconfiguratorconfiguratorEntity{}

// ProductconfiguratorconfiguratorEntity Represents a configurator entity, including its unique identifier, global resource name (GRN), product association, and a list of configuration steps.
type ProductconfiguratorconfiguratorEntity struct {
	// The unique identifier for the configurator.
	Id *string `json:"id,omitempty"`
	// The global resource name associated with the configurator.
	Grn *string `json:"grn,omitempty"`
	// The identifier of the product linked to the configurator.
	ProductId *string `json:"productId,omitempty"`
	// A descriptive label for the configurator.
	Label  *string                                `json:"label,omitempty"`
	Status *ProductconfiguratorconfiguratorStatus `json:"status,omitempty"`
	// A list of steps that define the configurator's structure.
	Steps                []ProductconfiguratorstepEntity `json:"steps,omitempty"`
	CreatedAt            *time.Time                      `json:"createdAt,omitempty"`
	UpdatedAt            *time.Time                      `json:"updatedAt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductconfiguratorconfiguratorEntity ProductconfiguratorconfiguratorEntity

// NewProductconfiguratorconfiguratorEntity instantiates a new ProductconfiguratorconfiguratorEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductconfiguratorconfiguratorEntity() *ProductconfiguratorconfiguratorEntity {
	this := ProductconfiguratorconfiguratorEntity{}
	var status ProductconfiguratorconfiguratorStatus = PRODUCTCONFIGURATORCONFIGURATORSTATUS_UNKNOWN
	this.Status = &status
	return &this
}

// NewProductconfiguratorconfiguratorEntityWithDefaults instantiates a new ProductconfiguratorconfiguratorEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductconfiguratorconfiguratorEntityWithDefaults() *ProductconfiguratorconfiguratorEntity {
	this := ProductconfiguratorconfiguratorEntity{}
	var status ProductconfiguratorconfiguratorStatus = PRODUCTCONFIGURATORCONFIGURATORSTATUS_UNKNOWN
	this.Status = &status
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductconfiguratorconfiguratorEntity) SetId(v string) {
	o.Id = &v
}

// GetGrn returns the Grn field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetGrn() string {
	if o == nil || IsNil(o.Grn) {
		var ret string
		return ret
	}
	return *o.Grn
}

// GetGrnOk returns a tuple with the Grn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetGrnOk() (*string, bool) {
	if o == nil || IsNil(o.Grn) {
		return nil, false
	}
	return o.Grn, true
}

// HasGrn returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasGrn() bool {
	if o != nil && !IsNil(o.Grn) {
		return true
	}

	return false
}

// SetGrn gets a reference to the given string and assigns it to the Grn field.
func (o *ProductconfiguratorconfiguratorEntity) SetGrn(v string) {
	o.Grn = &v
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetProductId() string {
	if o == nil || IsNil(o.ProductId) {
		var ret string
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given string and assigns it to the ProductId field.
func (o *ProductconfiguratorconfiguratorEntity) SetProductId(v string) {
	o.ProductId = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ProductconfiguratorconfiguratorEntity) SetLabel(v string) {
	o.Label = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetStatus() ProductconfiguratorconfiguratorStatus {
	if o == nil || IsNil(o.Status) {
		var ret ProductconfiguratorconfiguratorStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetStatusOk() (*ProductconfiguratorconfiguratorStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProductconfiguratorconfiguratorStatus and assigns it to the Status field.
func (o *ProductconfiguratorconfiguratorEntity) SetStatus(v ProductconfiguratorconfiguratorStatus) {
	o.Status = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetSteps() []ProductconfiguratorstepEntity {
	if o == nil || IsNil(o.Steps) {
		var ret []ProductconfiguratorstepEntity
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetStepsOk() ([]ProductconfiguratorstepEntity, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []ProductconfiguratorstepEntity and assigns it to the Steps field.
func (o *ProductconfiguratorconfiguratorEntity) SetSteps(v []ProductconfiguratorstepEntity) {
	o.Steps = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ProductconfiguratorconfiguratorEntity) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ProductconfiguratorconfiguratorEntity) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorconfiguratorEntity) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ProductconfiguratorconfiguratorEntity) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ProductconfiguratorconfiguratorEntity) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ProductconfiguratorconfiguratorEntity) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductconfiguratorconfiguratorEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Grn) {
		toSerialize["grn"] = o.Grn
	}
	if !IsNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductconfiguratorconfiguratorEntity) UnmarshalJSON(data []byte) (err error) {
	varProductconfiguratorconfiguratorEntity := _ProductconfiguratorconfiguratorEntity{}

	err = json.Unmarshal(data, &varProductconfiguratorconfiguratorEntity)

	if err != nil {
		return err
	}

	*o = ProductconfiguratorconfiguratorEntity(varProductconfiguratorconfiguratorEntity)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "grn")
		delete(additionalProperties, "productId")
		delete(additionalProperties, "label")
		delete(additionalProperties, "status")
		delete(additionalProperties, "steps")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ProductconfiguratorconfiguratorEntity) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ProductconfiguratorconfiguratorEntity) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableProductconfiguratorconfiguratorEntity struct {
	value *ProductconfiguratorconfiguratorEntity
	isSet bool
}

func (v NullableProductconfiguratorconfiguratorEntity) Get() *ProductconfiguratorconfiguratorEntity {
	return v.value
}

func (v *NullableProductconfiguratorconfiguratorEntity) Set(val *ProductconfiguratorconfiguratorEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratorconfiguratorEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratorconfiguratorEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratorconfiguratorEntity(val *ProductconfiguratorconfiguratorEntity) *NullableProductconfiguratorconfiguratorEntity {
	return &NullableProductconfiguratorconfiguratorEntity{value: val, isSet: true}
}

func (v NullableProductconfiguratorconfiguratorEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratorconfiguratorEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
