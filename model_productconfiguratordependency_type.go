/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProductconfiguratordependencyType the model 'ProductconfiguratordependencyType'
type ProductconfiguratordependencyType string

// List of productconfiguratordependencyType
const (
	PRODUCTCONFIGURATORDEPENDENCYTYPE_UNKNOWN ProductconfiguratordependencyType = "UNKNOWN"
	PRODUCTCONFIGURATORDEPENDENCYTYPE_ALL ProductconfiguratordependencyType = "ALL"
	PRODUCTCONFIGURATORDEPENDENCYTYPE_ANY ProductconfiguratordependencyType = "ANY"
)

// All allowed values of ProductconfiguratordependencyType enum
var AllowedProductconfiguratordependencyTypeEnumValues = []ProductconfiguratordependencyType{
	"UNKNOWN",
	"ALL",
	"ANY",
}

func (v *ProductconfiguratordependencyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProductconfiguratordependencyType(value)
	for _, existing := range AllowedProductconfiguratordependencyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProductconfiguratordependencyType", value)
}

// NewProductconfiguratordependencyTypeFromValue returns a pointer to a valid ProductconfiguratordependencyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProductconfiguratordependencyTypeFromValue(v string) (*ProductconfiguratordependencyType, error) {
	ev := ProductconfiguratordependencyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProductconfiguratordependencyType: valid values are %v", v, AllowedProductconfiguratordependencyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProductconfiguratordependencyType) IsValid() bool {
	for _, existing := range AllowedProductconfiguratordependencyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to productconfiguratordependencyType value
func (v ProductconfiguratordependencyType) Ptr() *ProductconfiguratordependencyType {
	return &v
}

type NullableProductconfiguratordependencyType struct {
	value *ProductconfiguratordependencyType
	isSet bool
}

func (v NullableProductconfiguratordependencyType) Get() *ProductconfiguratordependencyType {
	return v.value
}

func (v *NullableProductconfiguratordependencyType) Set(val *ProductconfiguratordependencyType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratordependencyType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratordependencyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratordependencyType(val *ProductconfiguratordependencyType) *NullableProductconfiguratordependencyType {
	return &NullableProductconfiguratordependencyType{value: val, isSet: true}
}

func (v NullableProductconfiguratordependencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratordependencyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

