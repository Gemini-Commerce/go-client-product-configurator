/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product_configurator

import (
	"encoding/json"
)

// ProductconfiguratordependencyUpdatePayload struct for ProductconfiguratordependencyUpdatePayload
type ProductconfiguratordependencyUpdatePayload struct {
	OptionIds []string `json:"optionIds,omitempty"`
	Condition *DependencyCondition `json:"condition,omitempty"`
}

// NewProductconfiguratordependencyUpdatePayload instantiates a new ProductconfiguratordependencyUpdatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductconfiguratordependencyUpdatePayload() *ProductconfiguratordependencyUpdatePayload {
	this := ProductconfiguratordependencyUpdatePayload{}
	return &this
}

// NewProductconfiguratordependencyUpdatePayloadWithDefaults instantiates a new ProductconfiguratordependencyUpdatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductconfiguratordependencyUpdatePayloadWithDefaults() *ProductconfiguratordependencyUpdatePayload {
	this := ProductconfiguratordependencyUpdatePayload{}
	return &this
}

// GetOptionIds returns the OptionIds field value if set, zero value otherwise.
func (o *ProductconfiguratordependencyUpdatePayload) GetOptionIds() []string {
	if o == nil || isNil(o.OptionIds) {
		var ret []string
		return ret
	}
	return o.OptionIds
}

// GetOptionIdsOk returns a tuple with the OptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratordependencyUpdatePayload) GetOptionIdsOk() ([]string, bool) {
	if o == nil || isNil(o.OptionIds) {
    return nil, false
	}
	return o.OptionIds, true
}

// HasOptionIds returns a boolean if a field has been set.
func (o *ProductconfiguratordependencyUpdatePayload) HasOptionIds() bool {
	if o != nil && !isNil(o.OptionIds) {
		return true
	}

	return false
}

// SetOptionIds gets a reference to the given []string and assigns it to the OptionIds field.
func (o *ProductconfiguratordependencyUpdatePayload) SetOptionIds(v []string) {
	o.OptionIds = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *ProductconfiguratordependencyUpdatePayload) GetCondition() DependencyCondition {
	if o == nil || isNil(o.Condition) {
		var ret DependencyCondition
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratordependencyUpdatePayload) GetConditionOk() (*DependencyCondition, bool) {
	if o == nil || isNil(o.Condition) {
    return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *ProductconfiguratordependencyUpdatePayload) HasCondition() bool {
	if o != nil && !isNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given DependencyCondition and assigns it to the Condition field.
func (o *ProductconfiguratordependencyUpdatePayload) SetCondition(v DependencyCondition) {
	o.Condition = &v
}

func (o ProductconfiguratordependencyUpdatePayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OptionIds) {
		toSerialize["optionIds"] = o.OptionIds
	}
	if !isNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	return json.Marshal(toSerialize)
}

type NullableProductconfiguratordependencyUpdatePayload struct {
	value *ProductconfiguratordependencyUpdatePayload
	isSet bool
}

func (v NullableProductconfiguratordependencyUpdatePayload) Get() *ProductconfiguratordependencyUpdatePayload {
	return v.value
}

func (v *NullableProductconfiguratordependencyUpdatePayload) Set(val *ProductconfiguratordependencyUpdatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratordependencyUpdatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratordependencyUpdatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratordependencyUpdatePayload(val *ProductconfiguratordependencyUpdatePayload) *NullableProductconfiguratordependencyUpdatePayload {
	return &NullableProductconfiguratordependencyUpdatePayload{value: val, isSet: true}
}

func (v NullableProductconfiguratordependencyUpdatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratordependencyUpdatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


