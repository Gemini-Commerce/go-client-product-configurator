/*
Product Configurator Service

 The Product Configurator Service is a versatile platform designed to manage dynamic product configurations.  It enables the creation, updating, and management of product configurations through steps, options, and dependencies,  ensuring granular control over customization.  ## Core Components 1. **Configurators**    - Create and manage configurators linked to products.    - Support for configurator states (`ACTIVE`, `DRAFT`, etc.) and versioning.  2. **Steps**    - Define logical sequences to guide users through the configuration process.    - Include localized labels, descriptions, and selection rules.  3. **Options**    - Add and manage options available for each step.    - Support for visual content (`Swatch`) and configurable quantities.  4. **Dependencies**    - Create rules between options and steps to control dynamic interactions.    - Manage complex conditions across configurations.  5. **Matrices**    - Use matrices to handle prices, weights, and other properties.    - Support for dynamic customization based on user selections.  6. **Properties**    - Add custom attributes and properties to configurators.  7. **Configuration Management**    - Retrieve available or user-specific configurations.    - Create optimized configurations to enhance the user experience.  ## Key Features - **Security**: Authenticate every request with JWT, ensuring safety and reliability. - **Flexibility**: Bulk operations (create, update, delete) for steps, options, and dependencies. - **Scalability**: Suitable for large volumes of configurations and complex personalization scenarios. - **Backward Compatibility**: Version management to minimize the impact of changes on existing clients.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productconfigurator

import (
	"encoding/json"
)

// checks if the ProductconfiguratormatrixUpdatePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductconfiguratormatrixUpdatePayload{}

// ProductconfiguratormatrixUpdatePayload struct for ProductconfiguratormatrixUpdatePayload
type ProductconfiguratormatrixUpdatePayload struct {
	Label *string `json:"label,omitempty"`
	// default_property_id is the id of the property that will be used as the starting point to calculate the differences between the properties.
	DefaultPropertyId *string                          `json:"defaultPropertyId,omitempty"`
	PropertiesMode    *ProductconfiguratorPropertyMode `json:"propertiesMode,omitempty"`
	// steps are the same as in the create request. This is a full replacement.
	Steps                []ProductconfiguratormatrixStep `json:"steps,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductconfiguratormatrixUpdatePayload ProductconfiguratormatrixUpdatePayload

// NewProductconfiguratormatrixUpdatePayload instantiates a new ProductconfiguratormatrixUpdatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductconfiguratormatrixUpdatePayload() *ProductconfiguratormatrixUpdatePayload {
	this := ProductconfiguratormatrixUpdatePayload{}
	var propertiesMode ProductconfiguratorPropertyMode = PRODUCTCONFIGURATORPROPERTYMODE_UNKNOWN
	this.PropertiesMode = &propertiesMode
	return &this
}

// NewProductconfiguratormatrixUpdatePayloadWithDefaults instantiates a new ProductconfiguratormatrixUpdatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductconfiguratormatrixUpdatePayloadWithDefaults() *ProductconfiguratormatrixUpdatePayload {
	this := ProductconfiguratormatrixUpdatePayload{}
	var propertiesMode ProductconfiguratorPropertyMode = PRODUCTCONFIGURATORPROPERTYMODE_UNKNOWN
	this.PropertiesMode = &propertiesMode
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ProductconfiguratormatrixUpdatePayload) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratormatrixUpdatePayload) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ProductconfiguratormatrixUpdatePayload) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ProductconfiguratormatrixUpdatePayload) SetLabel(v string) {
	o.Label = &v
}

// GetDefaultPropertyId returns the DefaultPropertyId field value if set, zero value otherwise.
func (o *ProductconfiguratormatrixUpdatePayload) GetDefaultPropertyId() string {
	if o == nil || IsNil(o.DefaultPropertyId) {
		var ret string
		return ret
	}
	return *o.DefaultPropertyId
}

// GetDefaultPropertyIdOk returns a tuple with the DefaultPropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratormatrixUpdatePayload) GetDefaultPropertyIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPropertyId) {
		return nil, false
	}
	return o.DefaultPropertyId, true
}

// HasDefaultPropertyId returns a boolean if a field has been set.
func (o *ProductconfiguratormatrixUpdatePayload) HasDefaultPropertyId() bool {
	if o != nil && !IsNil(o.DefaultPropertyId) {
		return true
	}

	return false
}

// SetDefaultPropertyId gets a reference to the given string and assigns it to the DefaultPropertyId field.
func (o *ProductconfiguratormatrixUpdatePayload) SetDefaultPropertyId(v string) {
	o.DefaultPropertyId = &v
}

// GetPropertiesMode returns the PropertiesMode field value if set, zero value otherwise.
func (o *ProductconfiguratormatrixUpdatePayload) GetPropertiesMode() ProductconfiguratorPropertyMode {
	if o == nil || IsNil(o.PropertiesMode) {
		var ret ProductconfiguratorPropertyMode
		return ret
	}
	return *o.PropertiesMode
}

// GetPropertiesModeOk returns a tuple with the PropertiesMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratormatrixUpdatePayload) GetPropertiesModeOk() (*ProductconfiguratorPropertyMode, bool) {
	if o == nil || IsNil(o.PropertiesMode) {
		return nil, false
	}
	return o.PropertiesMode, true
}

// HasPropertiesMode returns a boolean if a field has been set.
func (o *ProductconfiguratormatrixUpdatePayload) HasPropertiesMode() bool {
	if o != nil && !IsNil(o.PropertiesMode) {
		return true
	}

	return false
}

// SetPropertiesMode gets a reference to the given ProductconfiguratorPropertyMode and assigns it to the PropertiesMode field.
func (o *ProductconfiguratormatrixUpdatePayload) SetPropertiesMode(v ProductconfiguratorPropertyMode) {
	o.PropertiesMode = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *ProductconfiguratormatrixUpdatePayload) GetSteps() []ProductconfiguratormatrixStep {
	if o == nil || IsNil(o.Steps) {
		var ret []ProductconfiguratormatrixStep
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratormatrixUpdatePayload) GetStepsOk() ([]ProductconfiguratormatrixStep, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *ProductconfiguratormatrixUpdatePayload) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []ProductconfiguratormatrixStep and assigns it to the Steps field.
func (o *ProductconfiguratormatrixUpdatePayload) SetSteps(v []ProductconfiguratormatrixStep) {
	o.Steps = v
}

func (o ProductconfiguratormatrixUpdatePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductconfiguratormatrixUpdatePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.DefaultPropertyId) {
		toSerialize["defaultPropertyId"] = o.DefaultPropertyId
	}
	if !IsNil(o.PropertiesMode) {
		toSerialize["propertiesMode"] = o.PropertiesMode
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductconfiguratormatrixUpdatePayload) UnmarshalJSON(data []byte) (err error) {
	varProductconfiguratormatrixUpdatePayload := _ProductconfiguratormatrixUpdatePayload{}

	err = json.Unmarshal(data, &varProductconfiguratormatrixUpdatePayload)

	if err != nil {
		return err
	}

	*o = ProductconfiguratormatrixUpdatePayload(varProductconfiguratormatrixUpdatePayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "label")
		delete(additionalProperties, "defaultPropertyId")
		delete(additionalProperties, "propertiesMode")
		delete(additionalProperties, "steps")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ProductconfiguratormatrixUpdatePayload) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ProductconfiguratormatrixUpdatePayload) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableProductconfiguratormatrixUpdatePayload struct {
	value *ProductconfiguratormatrixUpdatePayload
	isSet bool
}

func (v NullableProductconfiguratormatrixUpdatePayload) Get() *ProductconfiguratormatrixUpdatePayload {
	return v.value
}

func (v *NullableProductconfiguratormatrixUpdatePayload) Set(val *ProductconfiguratormatrixUpdatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratormatrixUpdatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratormatrixUpdatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratormatrixUpdatePayload(val *ProductconfiguratormatrixUpdatePayload) *NullableProductconfiguratormatrixUpdatePayload {
	return &NullableProductconfiguratormatrixUpdatePayload{value: val, isSet: true}
}

func (v NullableProductconfiguratormatrixUpdatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratormatrixUpdatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
