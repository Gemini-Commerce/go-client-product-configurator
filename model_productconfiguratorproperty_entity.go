/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product_configurator

import (
	"encoding/json"
	"time"
)

// ProductconfiguratorpropertyEntity struct for ProductconfiguratorpropertyEntity
type ProductconfiguratorpropertyEntity struct {
	Id *string `json:"id,omitempty"`
	Grn *string `json:"grn,omitempty"`
	OptionIds []string `json:"optionIds,omitempty"`
	PropertyKey *string `json:"propertyKey,omitempty"`
	PropertyValue *string `json:"propertyValue,omitempty"`
	PropertyType *ProductconfiguratorPropertyType `json:"propertyType,omitempty"`
	Coordinates []int64 `json:"coordinates,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewProductconfiguratorpropertyEntity instantiates a new ProductconfiguratorpropertyEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductconfiguratorpropertyEntity() *ProductconfiguratorpropertyEntity {
	this := ProductconfiguratorpropertyEntity{}
	var propertyType ProductconfiguratorPropertyType = UNKNOWN
	this.PropertyType = &propertyType
	return &this
}

// NewProductconfiguratorpropertyEntityWithDefaults instantiates a new ProductconfiguratorpropertyEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductconfiguratorpropertyEntityWithDefaults() *ProductconfiguratorpropertyEntity {
	this := ProductconfiguratorpropertyEntity{}
	var propertyType ProductconfiguratorPropertyType = UNKNOWN
	this.PropertyType = &propertyType
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProductconfiguratorpropertyEntity) SetId(v string) {
	o.Id = &v
}

// GetGrn returns the Grn field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetGrn() string {
	if o == nil || isNil(o.Grn) {
		var ret string
		return ret
	}
	return *o.Grn
}

// GetGrnOk returns a tuple with the Grn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetGrnOk() (*string, bool) {
	if o == nil || isNil(o.Grn) {
    return nil, false
	}
	return o.Grn, true
}

// HasGrn returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasGrn() bool {
	if o != nil && !isNil(o.Grn) {
		return true
	}

	return false
}

// SetGrn gets a reference to the given string and assigns it to the Grn field.
func (o *ProductconfiguratorpropertyEntity) SetGrn(v string) {
	o.Grn = &v
}

// GetOptionIds returns the OptionIds field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetOptionIds() []string {
	if o == nil || isNil(o.OptionIds) {
		var ret []string
		return ret
	}
	return o.OptionIds
}

// GetOptionIdsOk returns a tuple with the OptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetOptionIdsOk() ([]string, bool) {
	if o == nil || isNil(o.OptionIds) {
    return nil, false
	}
	return o.OptionIds, true
}

// HasOptionIds returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasOptionIds() bool {
	if o != nil && !isNil(o.OptionIds) {
		return true
	}

	return false
}

// SetOptionIds gets a reference to the given []string and assigns it to the OptionIds field.
func (o *ProductconfiguratorpropertyEntity) SetOptionIds(v []string) {
	o.OptionIds = v
}

// GetPropertyKey returns the PropertyKey field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetPropertyKey() string {
	if o == nil || isNil(o.PropertyKey) {
		var ret string
		return ret
	}
	return *o.PropertyKey
}

// GetPropertyKeyOk returns a tuple with the PropertyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetPropertyKeyOk() (*string, bool) {
	if o == nil || isNil(o.PropertyKey) {
    return nil, false
	}
	return o.PropertyKey, true
}

// HasPropertyKey returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasPropertyKey() bool {
	if o != nil && !isNil(o.PropertyKey) {
		return true
	}

	return false
}

// SetPropertyKey gets a reference to the given string and assigns it to the PropertyKey field.
func (o *ProductconfiguratorpropertyEntity) SetPropertyKey(v string) {
	o.PropertyKey = &v
}

// GetPropertyValue returns the PropertyValue field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetPropertyValue() string {
	if o == nil || isNil(o.PropertyValue) {
		var ret string
		return ret
	}
	return *o.PropertyValue
}

// GetPropertyValueOk returns a tuple with the PropertyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetPropertyValueOk() (*string, bool) {
	if o == nil || isNil(o.PropertyValue) {
    return nil, false
	}
	return o.PropertyValue, true
}

// HasPropertyValue returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasPropertyValue() bool {
	if o != nil && !isNil(o.PropertyValue) {
		return true
	}

	return false
}

// SetPropertyValue gets a reference to the given string and assigns it to the PropertyValue field.
func (o *ProductconfiguratorpropertyEntity) SetPropertyValue(v string) {
	o.PropertyValue = &v
}

// GetPropertyType returns the PropertyType field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetPropertyType() ProductconfiguratorPropertyType {
	if o == nil || isNil(o.PropertyType) {
		var ret ProductconfiguratorPropertyType
		return ret
	}
	return *o.PropertyType
}

// GetPropertyTypeOk returns a tuple with the PropertyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetPropertyTypeOk() (*ProductconfiguratorPropertyType, bool) {
	if o == nil || isNil(o.PropertyType) {
    return nil, false
	}
	return o.PropertyType, true
}

// HasPropertyType returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasPropertyType() bool {
	if o != nil && !isNil(o.PropertyType) {
		return true
	}

	return false
}

// SetPropertyType gets a reference to the given ProductconfiguratorPropertyType and assigns it to the PropertyType field.
func (o *ProductconfiguratorpropertyEntity) SetPropertyType(v ProductconfiguratorPropertyType) {
	o.PropertyType = &v
}

// GetCoordinates returns the Coordinates field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetCoordinates() []int64 {
	if o == nil || isNil(o.Coordinates) {
		var ret []int64
		return ret
	}
	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetCoordinatesOk() ([]int64, bool) {
	if o == nil || isNil(o.Coordinates) {
    return nil, false
	}
	return o.Coordinates, true
}

// HasCoordinates returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasCoordinates() bool {
	if o != nil && !isNil(o.Coordinates) {
		return true
	}

	return false
}

// SetCoordinates gets a reference to the given []int64 and assigns it to the Coordinates field.
func (o *ProductconfiguratorpropertyEntity) SetCoordinates(v []int64) {
	o.Coordinates = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ProductconfiguratorpropertyEntity) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyEntity) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyEntity) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyEntity) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ProductconfiguratorpropertyEntity) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ProductconfiguratorpropertyEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Grn) {
		toSerialize["grn"] = o.Grn
	}
	if !isNil(o.OptionIds) {
		toSerialize["optionIds"] = o.OptionIds
	}
	if !isNil(o.PropertyKey) {
		toSerialize["propertyKey"] = o.PropertyKey
	}
	if !isNil(o.PropertyValue) {
		toSerialize["propertyValue"] = o.PropertyValue
	}
	if !isNil(o.PropertyType) {
		toSerialize["propertyType"] = o.PropertyType
	}
	if !isNil(o.Coordinates) {
		toSerialize["coordinates"] = o.Coordinates
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableProductconfiguratorpropertyEntity struct {
	value *ProductconfiguratorpropertyEntity
	isSet bool
}

func (v NullableProductconfiguratorpropertyEntity) Get() *ProductconfiguratorpropertyEntity {
	return v.value
}

func (v *NullableProductconfiguratorpropertyEntity) Set(val *ProductconfiguratorpropertyEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratorpropertyEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratorpropertyEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratorpropertyEntity(val *ProductconfiguratorpropertyEntity) *NullableProductconfiguratorpropertyEntity {
	return &NullableProductconfiguratorpropertyEntity{value: val, isSet: true}
}

func (v NullableProductconfiguratorpropertyEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratorpropertyEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


