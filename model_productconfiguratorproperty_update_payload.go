/*
Product Configurator Service

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package product_configurator

import (
	"encoding/json"
)

// ProductconfiguratorpropertyUpdatePayload struct for ProductconfiguratorpropertyUpdatePayload
type ProductconfiguratorpropertyUpdatePayload struct {
	GenericProperty *PropertyUpdatePayloadGenericProperty `json:"genericProperty,omitempty"`
}

// NewProductconfiguratorpropertyUpdatePayload instantiates a new ProductconfiguratorpropertyUpdatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductconfiguratorpropertyUpdatePayload() *ProductconfiguratorpropertyUpdatePayload {
	this := ProductconfiguratorpropertyUpdatePayload{}
	return &this
}

// NewProductconfiguratorpropertyUpdatePayloadWithDefaults instantiates a new ProductconfiguratorpropertyUpdatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductconfiguratorpropertyUpdatePayloadWithDefaults() *ProductconfiguratorpropertyUpdatePayload {
	this := ProductconfiguratorpropertyUpdatePayload{}
	return &this
}

// GetGenericProperty returns the GenericProperty field value if set, zero value otherwise.
func (o *ProductconfiguratorpropertyUpdatePayload) GetGenericProperty() PropertyUpdatePayloadGenericProperty {
	if o == nil || isNil(o.GenericProperty) {
		var ret PropertyUpdatePayloadGenericProperty
		return ret
	}
	return *o.GenericProperty
}

// GetGenericPropertyOk returns a tuple with the GenericProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductconfiguratorpropertyUpdatePayload) GetGenericPropertyOk() (*PropertyUpdatePayloadGenericProperty, bool) {
	if o == nil || isNil(o.GenericProperty) {
    return nil, false
	}
	return o.GenericProperty, true
}

// HasGenericProperty returns a boolean if a field has been set.
func (o *ProductconfiguratorpropertyUpdatePayload) HasGenericProperty() bool {
	if o != nil && !isNil(o.GenericProperty) {
		return true
	}

	return false
}

// SetGenericProperty gets a reference to the given PropertyUpdatePayloadGenericProperty and assigns it to the GenericProperty field.
func (o *ProductconfiguratorpropertyUpdatePayload) SetGenericProperty(v PropertyUpdatePayloadGenericProperty) {
	o.GenericProperty = &v
}

func (o ProductconfiguratorpropertyUpdatePayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GenericProperty) {
		toSerialize["genericProperty"] = o.GenericProperty
	}
	return json.Marshal(toSerialize)
}

type NullableProductconfiguratorpropertyUpdatePayload struct {
	value *ProductconfiguratorpropertyUpdatePayload
	isSet bool
}

func (v NullableProductconfiguratorpropertyUpdatePayload) Get() *ProductconfiguratorpropertyUpdatePayload {
	return v.value
}

func (v *NullableProductconfiguratorpropertyUpdatePayload) Set(val *ProductconfiguratorpropertyUpdatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableProductconfiguratorpropertyUpdatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableProductconfiguratorpropertyUpdatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductconfiguratorpropertyUpdatePayload(val *ProductconfiguratorpropertyUpdatePayload) *NullableProductconfiguratorpropertyUpdatePayload {
	return &NullableProductconfiguratorpropertyUpdatePayload{value: val, isSet: true}
}

func (v NullableProductconfiguratorpropertyUpdatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductconfiguratorpropertyUpdatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


