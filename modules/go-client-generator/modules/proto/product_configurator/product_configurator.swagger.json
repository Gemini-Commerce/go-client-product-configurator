{
  "swagger": "2.0",
  "info": {
    "title": "Product Configurator Service",
    "description": "## Introduction\n\nThis comprehensive guide will equip you with the knowledge to integrate and leverage our Product Configurator Service in your applications.\n\n## Quick Start\n\nGet up and running in no time! Follow these steps to kickstart your integration:\n\n1. **Authentication:** Obtain your integration JWT to authenticate your requests.\n2. **Client Libraries:** Explore our GitHub repositories to grab client libraries in your preferred programming language.\n3. **API Overview:** Familiarize yourself with our RESTful API using the OpenAPI specification.\n\n## Integration\n\n### API Overview\n\nOur RESTful API is the gateway to unlocking the full potential of Product Configurator. Check out the detailed [API Reference](/docs/category/configurator) for a granular understanding of each endpoint and request/response format.\n\n### Client Libraries\n\nTo expedite your integration process, we provide client libraries for various programming languages. Find the one that suits your stack in our [GitHub repositories](https://github.com/Gemini-Commerce).\n\n### Authentication\n\nSecurity is paramount. Learn how to authenticate your requests using JWT. This ensures a secure and reliable connection between your application and Product Configurator.\n\n## Configuration Management\n\n### Configurator Lifecycle\n\nUnderstand the lifecycle of configurators, from draft to active and deleted. This flexibility allows you to manage configurations at your own pace.\n\n### Steps and Options\n\nConfigure product steps with ease and define options effortlessly. Explore the power of dependencies to create dynamic and intuitive configurations.\n\n### Matrices\n\nDelve into matricesâ€”your secret weapon. Explore price and weight matrices, and learn how configured steps influence properties and pricing.\n\n### Price Management\n\nUnleash dynamic pricing with our versatile price matrices. From fixed prices to incremental structures, adapt to diverse pricing models effortlessly.\n\n## Security\n\nYour data is in safe hands. Discover how Product Configurator ensures security through JWT authentication, safeguarding your sensitive information.\n\n## Backward Compatibility\n\nStay ahead of the curve. Learn about our versioning strategy, providing backward compatibility while allowing our service to evolve seamlessly.\n\n## Developer Support\n\nHave questions? Need assistance? Write to us at [info@gemini-commerce.com](mailto:info@gemini-commerce.com) and we will get back to you.",
    "version": "v1",
    "contact": {
      "name": "Gemini Team",
      "email": "info@gemini-commerce.com"
    },
    "license": {
      "name": "AGPL-3.0",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }
  },
  "tags": [
    {
      "name": "ProductConfigurator",
      "externalDocs": {
        "url": "https://gemini-commerce.com/api/product-configurator"
      }
    }
  ],
  "host": "product-configurator.api.gogemini.io",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/{tenantId}/configurator/{configuratorId}": {
      "delete": {
        "summary": "Delete Configurator",
        "description": "Delete a product configurator by specifying the tenant and configurator IDs. Ensure precise removal of unwanted configurations with a straightforward DELETE request.",
        "operationId": "ProductConfigurator_DeleteConfigurator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorconfiguratorDeleteResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuratorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "configurator"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      },
      "put": {
        "summary": "Update Configurator",
        "description": "Modify an existing product configurator by specifying the tenant and configurator IDs. Use a PUT request with the updated configuration details in the body to seamlessly update and manage product configurations",
        "operationId": "ProductConfigurator_UpdateConfigurator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorconfiguratorEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuratorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "payload": {
                  "$ref": "#/definitions/productconfiguratorconfiguratorUpdatePayload"
                },
                "payloadMask": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "configurator"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/configurator/{configuratorId}/page-size/{pageSize}/matrices": {
      "post": {
        "summary": "List Matrices",
        "description": "Retrieve a list of matrices for a specific configurator based on tenant and configurator IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all matrices associated with the configurator. Streamline matrix management effortlessly.",
        "operationId": "ProductConfigurator_ListMatrices",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/matrixListMatricesResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuratorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "filterMask": {
                  "type": "string"
                },
                "filter": {
                  "$ref": "#/definitions/ListMatricesRequestFilter"
                },
                "pageToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "matrix"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/configurator/{configuratorId}/step/create": {
      "post": {
        "summary": "Create Step",
        "description": "Add a new step to an existing product configurator by specifying the tenant and configurator IDs. Utilize a POST request with the required step details in the body to seamlessly extend the configuration process.",
        "operationId": "ProductConfigurator_CreateStep",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorstepEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuratorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "label": {
                  "$ref": "#/definitions/localisationLocalizedText"
                },
                "description": {
                  "$ref": "#/definitions/localisationLocalizedText"
                },
                "isRequired": {
                  "type": "boolean"
                },
                "subjectToStepId": {
                  "type": "string"
                },
                "hasMultipleSelection": {
                  "type": "boolean"
                },
                "optionsHaveQuantity": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "tags": [
          "step"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/configurator/{configuratorId}/step/create/bulk": {
      "post": {
        "summary": "Bulk Create Steps",
        "description": "Add multiple steps to an existing product configurator simultaneously. Submit a POST request with the necessary step details in the body to efficiently extend the configuration process in bulk. Simplify large-scale configuration management effortlessly.",
        "operationId": "ProductConfigurator_BulkCreateSteps",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorstepBulkCreateResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuratorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/productconfiguratorstepBulkCreateRequestCreateEntity"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "step"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/dependency/{dependencyId}": {
      "delete": {
        "summary": "Delete Dependency",
        "description": "Remove a specific dependency by specifying the tenant and dependency IDs. Ensure precision in dependency management with a straightforward DELETE request, simplifying the elimination of unwanted configuration logic.",
        "operationId": "ProductConfigurator_DeleteDependency",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratordependencyDeleteResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dependencyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "dependency"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      },
      "put": {
        "summary": "Update Dependency",
        "description": "Modify an existing dependency by specifying the tenant and dependency IDs. Utilize a PUT request with updated dependency details in the body for seamless customization and fine-tuning of your product configurations.",
        "operationId": "ProductConfigurator_UpdateDependency",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratordependencyEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dependencyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "payload": {
                  "$ref": "#/definitions/productconfiguratordependencyUpdatePayload"
                },
                "payloadMask": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "dependency"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/matrix/create": {
      "post": {
        "summary": "Create Matrix",
        "description": "Establish a new matrix by specifying the tenant ID. Utilize a POST request with the required matrix details in the body for seamless customization and expansion of matrix configurations.",
        "operationId": "ProductConfigurator_CreateMatrix",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratormatrixEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "configuratorId": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "genericType": {
                  "$ref": "#/definitions/matrixGenericType"
                },
                "priceType": {
                  "$ref": "#/definitions/matrixPriceType"
                },
                "weightType": {
                  "$ref": "#/definitions/matrixWeightType"
                },
                "steps": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/productconfiguratormatrixStep"
                  }
                },
                "propertiesMode": {
                  "$ref": "#/definitions/productconfiguratorPropertyMode"
                }
              }
            }
          }
        ],
        "tags": [
          "matrix"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/matrix/{matrixId}": {
      "get": {
        "summary": "Get Matrix",
        "description": "Retrieve matrix details by specifying the tenant and matrix IDs. Utilize a GET request for a comprehensive view of matrix configurations within your product configurator service.",
        "operationId": "ProductConfigurator_GetMatrix",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratormatrixEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "matrixId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "matrix"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      },
      "delete": {
        "summary": "Delete Matrix",
        "description": "Remove a specific matrix by specifying the tenant and matrix IDs. Ensure precision in matrix management with a straightforward DELETE request, simplifying the elimination of unwanted matrix configurations.",
        "operationId": "ProductConfigurator_DeleteMatrix",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratormatrixDeleteResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "matrixId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "matrix"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      },
      "put": {
        "summary": "Update Matrix",
        "description": "Modify an existing matrix by specifying the tenant and matrix IDs. Utilize a PUT request with updated matrix details in the body for seamless customization and fine-tuning of your product configurations. Keep your matrices in sync effortlessly.",
        "operationId": "ProductConfigurator_UpdateMatrix",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratormatrixEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "matrixId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "payload": {
                  "$ref": "#/definitions/productconfiguratormatrixUpdatePayload"
                },
                "payloadMask": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "matrix"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/matrix/{matrixId}/page-size/{pageSize}/properties": {
      "post": {
        "summary": "List Properties",
        "description": "Retrieve a list of properties for a specific matrix based on tenant and matrix IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all properties associated with the matrix.",
        "operationId": "ProductConfigurator_ListProperties",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/propertyListPropertiesResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "matrixId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pageToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "property"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/matrix/{matrixId}/pricelist/{pricelistGrn}": {
      "delete": {
        "summary": "Remove Pricelist from Matrix",
        "description": "Remove a specific pricelist from a matrix by specifying the tenant, matrix, and pricelist IDs. Use a DELETE request for precise management of pricelist configurations within your product configurator service.",
        "operationId": "ProductConfigurator_RemovePricelistFromMatrix",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratormatrixEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "matrixId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pricelistGrn",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "matrix"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/option/bulk": {
      "put": {
        "summary": "Bulk Update Options",
        "description": "Effortlessly update multiple options. Specify the tenant ID and submit a PUT request with the updated option details in the body. Streamline the customization of a multitude of options in one go.",
        "operationId": "ProductConfigurator_BulkUpdateOptions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionBulkUpdateResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "options": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/productconfiguratoroptionBulkUpdateRequestUpdateEntity"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/option/delete/bulk": {
      "post": {
        "summary": "Bulk Delete Options",
        "description": "Efficiently remove multiple options from configurations using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of option IDs in the body for streamlined option management.",
        "operationId": "ProductConfigurator_BulkDeleteOptions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionBulkDeleteResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "optionIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/option/{optionId}": {
      "delete": {
        "summary": "Delete Option",
        "description": "Remove a specific option by specifying the tenant and option IDs. Ensure precision in option management with a straightforward DELETE request, simplifying the elimination of unwanted configuration choices.",
        "operationId": "ProductConfigurator_DeleteOption",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionDeleteResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "optionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      },
      "put": {
        "summary": "Update Option",
        "description": "Modify an existing option by specifying the tenant and option IDs. Utilize a PUT request with updated option details in the body for seamless customization and fine-tuning of your product configurations.",
        "operationId": "ProductConfigurator_UpdateOption",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "optionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "payload": {
                  "$ref": "#/definitions/productconfiguratoroptionUpdatePayload"
                },
                "payloadMask": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/option/{sourceOptionId}/copy": {
      "post": {
        "summary": "Copy Option",
        "description": "Duplicate an existing option from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new option based on the source configuration. Streamline option replication effortlessly.",
        "operationId": "ProductConfigurator_CopyOption",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceOptionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "targetStepId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/page-size/{pageSize}/dependencies": {
      "post": {
        "summary": "List Dependencies",
        "description": "Retrieve a list of dependencies based on the specified tenant ID. Customize results by specifying page size for efficient pagination. Submit an empty body to get all dependencies associated with the configurations.",
        "operationId": "ProductConfigurator_ListDependencies",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/dependencyListDependenciesResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "stepIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pageToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "dependency"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/product/{productId}": {
      "get": {
        "summary": "Get Product Configurator by Product ID",
        "description": "Get a product configurator by product ID.",
        "operationId": "ProductConfigurator_GetConfiguratorByProductId",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorconfiguratorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "ACTIVE",
              "DRAFT",
              "DISABLED"
            ],
            "default": "UNKNOWN"
          }
        ],
        "tags": [
          "configurator"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/product/{productId}/configuration": {
      "get": {
        "summary": "Get Available Configuration",
        "description": "Retrieve available configurations for a specific product and tenant. Use a GET request for read-only access or submit additional criteria in the body of a POST request for tailored configuration results. Streamline the retrieval of configurations effortlessly.",
        "operationId": "ProductConfigurator_GetAvailableConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/configurationGetAvailableConfigurationResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "configuratorId",
            "description": "If not set, the service returns the active configurator",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "configuration"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      },
      "post": {
        "summary": "Get Available Configuration",
        "description": "Retrieve available configurations for a specific product and tenant. Use a GET request for read-only access or submit additional criteria in the body of a POST request for tailored configuration results. Streamline the retrieval of configurations effortlessly.",
        "operationId": "ProductConfigurator_GetAvailableConfiguration2",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/configurationGetAvailableConfigurationResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "selections": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/configurationSelection"
                  }
                },
                "propertyFilters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/configurationPropertyFilter"
                  }
                },
                "configuratorId": {
                  "type": "string",
                  "title": "If not set, the service returns the active configurator"
                }
              }
            }
          }
        ],
        "tags": [
          "configuration"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/product/{productId}/configuration-from-selections": {
      "post": {
        "summary": "Get Configuration from Selections",
        "description": "Retrieve a configuration based on user selections for a specific product and tenant. Submit a POST request with user selections in the body to receive a tailored configuration. Enhance the user experience by dynamically generating configurations based on user input.",
        "operationId": "ProductConfigurator_GetConfigurationFromSelections",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/configurationGetConfigurationFromSelectionsResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "selections": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/configurationSelection"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "configuration"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/product/{productId}/create": {
      "post": {
        "summary": "Create Configurator",
        "description": "Create a new product configurator for a specified tenant and product. Submit the desired configuration details in the request body to initiate the creation process.",
        "operationId": "ProductConfigurator_CreateConfigurator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorconfiguratorCreateRequest"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "configurator"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/product/{productId}/page-size/{pageSize}/configurators": {
      "post": {
        "summary": "List Product Configurators",
        "description": "List all product configurators.",
        "operationId": "ProductConfigurator_ListConfigurators",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/configuratorListResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pageToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "configurator"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/product/{productId}/status/{status}": {
      "get": {
        "summary": "Get Product Configurator by Product ID",
        "description": "Get a product configurator by product ID.",
        "operationId": "ProductConfigurator_GetConfiguratorByProductId2",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorconfiguratorEntity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "status",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "ACTIVE",
              "DRAFT",
              "DISABLED"
            ]
          }
        ],
        "tags": [
          "configurator"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/product/{sourceConfiguratorId}/copy": {
      "post": {
        "summary": "Copy Configurator",
        "description": "Duplicate an existing product configurator from the source to the specified tenant and product. Submit an empty body to initiate the copy process, creating a new configuration based on the source.",
        "operationId": "ProductConfigurator_CopyConfigurator",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorconfiguratorEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceConfiguratorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "targetProductId": {
                  "type": "string"
                },
                "copyDependencies": {
                  "type": "boolean",
                  "title": "If true, copy all dependencies of the source configurator"
                },
                "copyMatrices": {
                  "type": "boolean",
                  "title": "If true, copy all matrices of the source configurator"
                }
              }
            }
          }
        ],
        "tags": [
          "configurator"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/properties/bulk": {
      "put": {
        "summary": "Bulk Update Properties",
        "description": "Effortlessly update multiple properties. Specify the tenant ID and submit a PUT request with the updated property details in the body. Streamline the customization of a multitude of properties in one go.",
        "operationId": "ProductConfigurator_BulkUpdateProperties",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorpropertyBulkUpdateResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "matrixId": {
                  "type": "string"
                },
                "entities": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/productconfiguratorpropertyBulkUpdateRequestUpdateEntity"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "property"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/property/create": {
      "post": {
        "summary": "Create Property",
        "description": "Integrate a new property into configurations by specifying the tenant ID. Use a POST request with the required property details in the body for seamless customization and expansion of product configurations.",
        "operationId": "ProductConfigurator_CreateProperty",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorpropertyEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "matrixId": {
                  "type": "string"
                },
                "stepIdToOptionId": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "genericProperty": {
                  "$ref": "#/definitions/productconfiguratorpropertyGenericProperty"
                },
                "priceProperty": {
                  "$ref": "#/definitions/productconfiguratorpropertyPriceProperty"
                },
                "weightProperty": {
                  "$ref": "#/definitions/productconfiguratorpropertyWeightProperty"
                }
              }
            }
          }
        ],
        "tags": [
          "property"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/property/create/bulk": {
      "post": {
        "summary": "Bulk Create Properties",
        "description": "Efficiently add multiple properties to configurations with a bulk create operation. Specify the tenant ID and submit a POST request with the necessary property details in the body for streamlined property management.",
        "operationId": "ProductConfigurator_BulkCreateProperties",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorpropertyBulkCreateResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "matrixId": {
                  "type": "string"
                },
                "properties": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/productconfiguratorpropertyBulkCreateRequestCreateEntity"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "property"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/property/{propertyId}": {
      "put": {
        "summary": "Update Property",
        "description": "Modify an existing property by specifying the tenant and property IDs. Utilize a PUT request with updated property details in the body for seamless customization and fine-tuning of your product configurations.",
        "operationId": "ProductConfigurator_UpdateProperty",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorpropertyEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "matrixId": {
                  "type": "string"
                },
                "payload": {
                  "$ref": "#/definitions/productconfiguratorpropertyUpdatePayload"
                },
                "payloadMask": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "property"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/step/delete/bulk": {
      "post": {
        "summary": "Bulk Delete Steps",
        "description": "Efficiently remove multiple steps from a product configurator using a bulk delete operation. Specify the tenant ID and submit a POST request with the list of step IDs in the body for streamlined configuration management.",
        "operationId": "ProductConfigurator_BulkDeleteSteps",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionBulkDeleteResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "stepIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "step"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/step/{sourceStepId}/copy": {
      "post": {
        "summary": "Copy Step",
        "description": "Duplicate an existing step from the source to a specified tenant. Utilize a POST request with an empty body to initiate the copy process, creating a new step based on the source configuration. Streamline step replication effortlessly.",
        "operationId": "ProductConfigurator_CopyStep",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorstepEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceStepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "targetConfiguratorId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "step"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/step/{stepId}": {
      "delete": {
        "summary": "Delete Step",
        "description": "Remove a step from a product configurator by specifying the tenant and step IDs. Ensure precision in configuration management with a straightforward DELETE request, simplifying the elimination of unwanted steps.",
        "operationId": "ProductConfigurator_DeleteStep",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "step"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      },
      "put": {
        "summary": "Update Step",
        "description": "Modify an existing step within a product configurator by specifying the tenant and step IDs. Utilize a PUT request with updated step details in the body for seamless customization and fine-tuning of your product configurations.",
        "operationId": "ProductConfigurator_UpdateStep",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratorstepEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "payload": {
                  "$ref": "#/definitions/productconfiguratorstepUpdatePayload"
                },
                "payloadMask": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "step"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/step/{stepId}/dependency/create": {
      "post": {
        "summary": "Create Dependency",
        "description": "Establish a new dependency for an existing step by specifying the tenant and step IDs. Utilize a POST request with the required dependency details in the body to seamlessly enhance the configuration logic of your product.",
        "operationId": "ProductConfigurator_CreateDependency",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratordependencyEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "optionIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "The option ids owned by the step id, that will be shown if the condition is met"
                },
                "condition": {
                  "$ref": "#/definitions/dependencyCondition"
                }
              }
            }
          }
        ],
        "tags": [
          "dependency"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/step/{stepId}/option/create": {
      "post": {
        "summary": "Create Option",
        "description": "Integrate a new option into an existing step by specifying the tenant and step IDs. Use a POST request with the required option details in the body for seamless customization and expansion of product configurations.",
        "operationId": "ProductConfigurator_CreateOption",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionEntity"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "label": {
                  "$ref": "#/definitions/localisationLocalizedText"
                },
                "position": {
                  "type": "string",
                  "format": "uint64"
                },
                "externalReferenceId": {
                  "type": "string"
                },
                "swatch": {
                  "$ref": "#/definitions/optionSwatch"
                }
              }
            }
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/step/{stepId}/option/create/bulk": {
      "post": {
        "summary": "Bulk Create Options",
        "description": "Add multiple options to an existing step simultaneously. Submit a POST request with the necessary option details in the body to efficiently expand the configuration possibilities in bulk. Streamline large-scale option management effortlessly.",
        "operationId": "ProductConfigurator_BulkCreateOptions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/productconfiguratoroptionBulkCreateResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "options": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/productconfiguratoroptionBulkCreateRequestCreateEntity"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    },
    "/v1/{tenantId}/step/{stepId}/page-size/{pageSize}/options": {
      "post": {
        "summary": "List Options",
        "description": "Retrieve a list of options for a specific step based on tenant and step IDs. Customize results by specifying page size for efficient pagination. Submit an empty body to get all options associated with the step.",
        "operationId": "ProductConfigurator_ListOptions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/optionListOptionsResponse"
            }
          },
          "400": {
            "description": "Bad Request or Limit Exceeded",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "500": {
            "description": "An internal error occurred is thrown when an incompatible payload is sent",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "pageToken": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "option"
        ],
        "security": [
          {
            "standardAuthorization": []
          }
        ]
      }
    }
  },
  "definitions": {
    "ConfigurationStepOption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "swatch": {
          "$ref": "#/definitions/optionSwatch"
        },
        "optionProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configurationOptionProperty"
          }
        },
        "hasQuantity": {
          "type": "boolean"
        }
      }
    },
    "ListMatricesRequestFilter": {
      "type": "object",
      "properties": {
        "propertyType": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productconfiguratorPropertyType"
          }
        },
        "propertyKey": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configurationConfigurationStep": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ConfigurationStepOption"
          }
        },
        "hasMultipleSelection": {
          "type": "boolean"
        }
      }
    },
    "configurationConfigurator": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorconfigurationStep"
          }
        }
      }
    },
    "configurationGetAvailableConfigurationResponse": {
      "type": "object",
      "properties": {
        "configurator": {
          "$ref": "#/definitions/configurationConfigurator"
        },
        "matchedProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configurationProperty"
          }
        },
        "selections": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configurationSelection"
          }
        }
      }
    },
    "configurationGetConfigurationFromSelectionsResponse": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configurationConfigurationStep"
          }
        },
        "matchedProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configurationProperty"
          }
        }
      }
    },
    "configurationOptionProperty": {
      "type": "object",
      "properties": {
        "propertyId": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "propertyType": {
          "$ref": "#/definitions/productconfiguratorPropertyType"
        },
        "subtractToGetVariation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "subtract_to_get_variation is a list of values and is used to calculate the variation from the property value."
        }
      }
    },
    "configurationProperty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "optionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "propertyKey": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "propertyType": {
          "$ref": "#/definitions/productconfiguratorPropertyType"
        },
        "propertyMode": {
          "$ref": "#/definitions/productconfiguratorPropertyMode"
        }
      }
    },
    "configurationPropertyFilter": {
      "type": "object",
      "properties": {
        "genericProperty": {
          "$ref": "#/definitions/configurationPropertyFilterGenericProperty"
        },
        "priceProperty": {
          "$ref": "#/definitions/configurationPropertyFilterPriceProperty"
        },
        "weightProperty": {
          "$ref": "#/definitions/configurationPropertyFilterWeightProperty"
        }
      }
    },
    "configurationPropertyFilterGenericProperty": {
      "type": "object",
      "properties": {
        "propertyKey": {
          "type": "string"
        }
      }
    },
    "configurationPropertyFilterPriceProperty": {
      "type": "object"
    },
    "configurationPropertyFilterWeightProperty": {
      "type": "object"
    },
    "configurationSelection": {
      "type": "object",
      "properties": {
        "stepId": {
          "type": "string"
        },
        "optionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configuratorListResponse": {
      "type": "object",
      "properties": {
        "configurators": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorconfiguratorEntity"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "dependencyCondition": {
      "type": "object",
      "properties": {
        "optionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "the option ids that must be selected by previous steps in order for this condition to be true"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/dependencyCondition"
          },
          "title": "the conditions that must be true for this condition to be true"
        },
        "type": {
          "$ref": "#/definitions/productconfiguratordependencyType",
          "title": "the type of condition, both option_ids and condition checks are determined by this"
        }
      },
      "title": "A dependency condition\n  options_ids and condition are mutually exclusive"
    },
    "dependencyListDependenciesResponse": {
      "type": "object",
      "properties": {
        "dependencies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratordependencyEntity"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "localisationLocalizedText": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "matrixGenericType": {
      "type": "object",
      "properties": {
        "propertyKey": {
          "type": "string"
        }
      }
    },
    "matrixListMatricesResponse": {
      "type": "object",
      "properties": {
        "matrices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratormatrixEntity"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "matrixPriceType": {
      "type": "object",
      "properties": {
        "pricelistGrns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "matrixWeightType": {
      "type": "object",
      "properties": {
        "weightUnit": {
          "$ref": "#/definitions/productconfiguratorWeightUnit"
        }
      }
    },
    "optionListOptionsResponse": {
      "type": "object",
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratoroptionEntity"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "optionSwatch": {
      "type": "object",
      "properties": {
        "grn": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "productconfiguratorMoney": {
      "type": "object",
      "properties": {
        "units": {
          "type": "string",
          "format": "int64",
          "description": "The whole units of the amount.\nFor example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar."
        },
        "micros": {
          "type": "integer",
          "format": "int32",
          "description": "Number of micro (10^-6) units of the amount.\nThe value must be between -999,999 and +999,999 inclusive.\nIf `units` is positive, `micros` must be positive or zero.\nIf `units` is zero, `micros` can be positive, zero, or negative.\nIf `units` is negative, `micros` must be negative or zero.\nFor example $-1.75 is represented as `units`=-1 and `micros`=-750,000."
        }
      },
      "description": "Represents an amount of money."
    },
    "productconfiguratorPropertyMode": {
      "type": "string",
      "enum": [
        "PROPERTY_MODE_UNKNOWN",
        "PROPERTY_MODE_FINAL",
        "PROPERTY_MODE_INCREMENTAL"
      ],
      "default": "PROPERTY_MODE_UNKNOWN",
      "title": "- PROPERTY_MODE_UNKNOWN: Default value if not specified\n - PROPERTY_MODE_FINAL: Final/Finite property\n - PROPERTY_MODE_INCREMENTAL: Incremental property"
    },
    "productconfiguratorPropertyType": {
      "type": "string",
      "enum": [
        "PROPERTY_TYPE_UNKNOWN",
        "PROPERTY_TYPE_GENERIC",
        "PROPERTY_TYPE_PRICE",
        "PROPERTY_TYPE_WEIGHT"
      ],
      "default": "PROPERTY_TYPE_UNKNOWN"
    },
    "productconfiguratorWeightUnit": {
      "type": "string",
      "enum": [
        "WEIGHT_UNIT_UNKNOWN",
        "WEIGHT_UNIT_KILOGRAM",
        "WEIGHT_UNIT_POUND"
      ],
      "default": "WEIGHT_UNIT_UNKNOWN"
    },
    "productconfiguratorconfigurationOption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "position": {
          "type": "string",
          "format": "uint64"
        },
        "swatch": {
          "$ref": "#/definitions/optionSwatch"
        },
        "enabled": {
          "type": "boolean"
        },
        "optionProperties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/configurationOptionProperty"
          }
        },
        "hasQuantity": {
          "type": "boolean"
        }
      }
    },
    "productconfiguratorconfigurationStep": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "description": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "subjectToStepId": {
          "type": "string"
        },
        "position": {
          "type": "string",
          "format": "uint64"
        },
        "isRequired": {
          "type": "boolean"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorconfigurationOption"
          }
        },
        "enabled": {
          "type": "boolean"
        },
        "hasMultipleSelection": {
          "type": "boolean"
        }
      }
    },
    "productconfiguratorconfiguratorDeleteResponse": {
      "type": "object"
    },
    "productconfiguratorconfiguratorEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/productconfiguratorconfiguratorStatus"
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorstepEntity"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "productconfiguratorconfiguratorStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "ACTIVE",
        "DRAFT",
        "DISABLED"
      ],
      "default": "UNKNOWN"
    },
    "productconfiguratorconfiguratorUpdatePayload": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/productconfiguratorconfiguratorStatus"
        }
      }
    },
    "productconfiguratordependencyDeleteResponse": {
      "type": "object"
    },
    "productconfiguratordependencyEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "optionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The option ids owned by the step id, that will be shown if the condition is met"
        },
        "condition": {
          "$ref": "#/definitions/dependencyCondition"
        },
        "stepId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "productconfiguratordependencyType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "ALL",
        "ANY"
      ],
      "default": "UNKNOWN"
    },
    "productconfiguratordependencyUpdatePayload": {
      "type": "object",
      "properties": {
        "optionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "condition": {
          "$ref": "#/definitions/dependencyCondition"
        }
      }
    },
    "productconfiguratormatrixDeleteResponse": {
      "type": "object"
    },
    "productconfiguratormatrixEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "configuratorId": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "defaultPropertyId": {
          "type": "string"
        },
        "propertiesMode": {
          "$ref": "#/definitions/productconfiguratorPropertyMode"
        },
        "genericType": {
          "$ref": "#/definitions/matrixGenericType"
        },
        "priceType": {
          "$ref": "#/definitions/matrixPriceType"
        },
        "weightType": {
          "$ref": "#/definitions/matrixWeightType"
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratormatrixStep"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "productconfiguratormatrixStep": {
      "type": "object",
      "properties": {
        "stepId": {
          "type": "string"
        }
      }
    },
    "productconfiguratormatrixUpdatePayload": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "defaultPropertyId": {
          "type": "string",
          "description": "default_property_id is the id of the property\nthat will be used as the starting point to calculate the differences between the properties."
        },
        "propertiesMode": {
          "$ref": "#/definitions/productconfiguratorPropertyMode"
        },
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratormatrixStep"
          },
          "description": "steps are the same as in the create request. This is a full replacement."
        }
      }
    },
    "productconfiguratoroptionBulkCreateRequestCreateEntity": {
      "type": "object",
      "properties": {
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "position": {
          "type": "string",
          "format": "uint64"
        },
        "externalReferenceId": {
          "type": "string"
        },
        "swatch": {
          "$ref": "#/definitions/optionSwatch"
        }
      }
    },
    "productconfiguratoroptionBulkCreateResponse": {
      "type": "object",
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratoroptionEntity"
          }
        }
      }
    },
    "productconfiguratoroptionBulkDeleteResponse": {
      "type": "object"
    },
    "productconfiguratoroptionBulkUpdateRequestUpdateEntity": {
      "type": "object",
      "properties": {
        "optionId": {
          "type": "string"
        },
        "payload": {
          "$ref": "#/definitions/productconfiguratoroptionUpdatePayload"
        },
        "payloadMask": {
          "type": "string"
        }
      }
    },
    "productconfiguratoroptionBulkUpdateResponse": {
      "type": "object",
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratoroptionEntity"
          }
        }
      }
    },
    "productconfiguratoroptionDeleteResponse": {
      "type": "object"
    },
    "productconfiguratoroptionEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "position": {
          "type": "string",
          "format": "uint64"
        },
        "swatch": {
          "$ref": "#/definitions/optionSwatch"
        },
        "externalReferenceId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "productconfiguratoroptionUpdatePayload": {
      "type": "object",
      "properties": {
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "position": {
          "type": "string",
          "format": "uint64"
        },
        "externalReferenceId": {
          "type": "string"
        },
        "swatch": {
          "$ref": "#/definitions/optionSwatch"
        }
      }
    },
    "productconfiguratorpropertyBulkCreateRequestCreateEntity": {
      "type": "object",
      "properties": {
        "stepIdToOptionId": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "genericProperty": {
          "$ref": "#/definitions/productconfiguratorpropertyGenericProperty"
        },
        "priceProperty": {
          "$ref": "#/definitions/productconfiguratorpropertyPriceProperty"
        },
        "weightProperty": {
          "$ref": "#/definitions/productconfiguratorpropertyWeightProperty"
        }
      }
    },
    "productconfiguratorpropertyBulkCreateResponse": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorpropertyEntity"
          }
        }
      }
    },
    "productconfiguratorpropertyBulkUpdateRequestUpdateEntity": {
      "type": "object",
      "properties": {
        "propertyId": {
          "type": "string"
        },
        "payload": {
          "$ref": "#/definitions/productconfiguratorpropertyUpdatePayload"
        },
        "payloadMask": {
          "type": "string"
        }
      }
    },
    "productconfiguratorpropertyBulkUpdateResponse": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorpropertyEntity"
          }
        }
      }
    },
    "productconfiguratorpropertyEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "stepIdToOptionId": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "propertyKey": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        },
        "propertyType": {
          "$ref": "#/definitions/productconfiguratorPropertyType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "productconfiguratorpropertyGenericProperty": {
      "type": "object",
      "properties": {
        "propertyKey": {
          "type": "string"
        },
        "propertyValue": {
          "type": "string"
        }
      }
    },
    "productconfiguratorpropertyPriceProperty": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/productconfiguratorMoney"
        },
        "pricelistGrn": {
          "type": "string"
        }
      }
    },
    "productconfiguratorpropertyUpdatePayload": {
      "type": "object",
      "properties": {
        "genericProperty": {
          "$ref": "#/definitions/propertyUpdatePayloadGenericProperty"
        },
        "weightProperty": {
          "$ref": "#/definitions/propertyUpdatePayloadWeightProperty"
        },
        "priceProperty": {
          "$ref": "#/definitions/propertyUpdatePayloadPriceProperty"
        }
      }
    },
    "productconfiguratorpropertyWeightProperty": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "number",
          "format": "double"
        },
        "weightUnit": {
          "$ref": "#/definitions/productconfiguratorWeightUnit"
        }
      }
    },
    "productconfiguratorstepBulkCreateRequestCreateEntity": {
      "type": "object",
      "properties": {
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "description": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "isRequired": {
          "type": "boolean"
        },
        "subjectToStepId": {
          "type": "string"
        },
        "hasMultipleSelection": {
          "type": "boolean"
        },
        "optionsHaveQuantity": {
          "type": "boolean"
        }
      }
    },
    "productconfiguratorstepBulkCreateResponse": {
      "type": "object",
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorstepEntity"
          }
        }
      }
    },
    "productconfiguratorstepBulkDeleteResponse": {
      "type": "object"
    },
    "productconfiguratorstepDeleteResponse": {
      "type": "object"
    },
    "productconfiguratorstepEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "grn": {
          "type": "string"
        },
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "description": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "subjectToStepId": {
          "type": "string"
        },
        "position": {
          "type": "string",
          "format": "uint64"
        },
        "isRequired": {
          "type": "boolean"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratoroptionEntity"
          }
        },
        "hasMultipleSelection": {
          "type": "boolean"
        },
        "optionsHaveQuantity": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "productconfiguratorstepUpdatePayload": {
      "type": "object",
      "properties": {
        "label": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "description": {
          "$ref": "#/definitions/localisationLocalizedText"
        },
        "position": {
          "type": "string",
          "format": "uint64"
        },
        "isRequired": {
          "type": "boolean"
        },
        "subjectToStepId": {
          "type": "string"
        },
        "hasMultipleSelection": {
          "type": "boolean"
        },
        "optionsHaveQuantity": {
          "type": "boolean"
        }
      }
    },
    "propertyListPropertiesResponse": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/productconfiguratorpropertyEntity"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "propertyUpdatePayloadGenericProperty": {
      "type": "object",
      "properties": {
        "propertyValue": {
          "type": "string"
        }
      }
    },
    "propertyUpdatePayloadPriceProperty": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/productconfiguratorMoney"
        },
        "pricelistGrn": {
          "type": "string"
        }
      }
    },
    "propertyUpdatePayloadWeightProperty": {
      "type": "object",
      "properties": {
        "weight": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    }
  },
  "securityDefinitions": {
    "standardAuthorization": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://iambackoffice.gogemini.io/iambackoffice.IamBackoffice/Login"
    }
  }
}
