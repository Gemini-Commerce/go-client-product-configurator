/*
Product Configurator Service

Testing OptionAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package product-configurator

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Gemini-Commerce/go-client-product-configurator"
)

func Test_product-configurator_OptionAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OptionAPIService ProductConfiguratorBulkCreateOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var stepId string

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorBulkCreateOptions(context.Background(), tenantId, stepId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OptionAPIService ProductConfiguratorBulkDeleteOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorBulkDeleteOptions(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OptionAPIService ProductConfiguratorBulkUpdateOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorBulkUpdateOptions(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OptionAPIService ProductConfiguratorCopyOption", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var sourceOptionId string

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorCopyOption(context.Background(), tenantId, sourceOptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OptionAPIService ProductConfiguratorCreateOption", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var stepId string

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorCreateOption(context.Background(), tenantId, stepId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OptionAPIService ProductConfiguratorDeleteOption", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var optionId string

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorDeleteOption(context.Background(), tenantId, optionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OptionAPIService ProductConfiguratorListOptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var stepId string
		var pageSize int64

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorListOptions(context.Background(), tenantId, stepId, pageSize).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OptionAPIService ProductConfiguratorUpdateOption", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var optionId string

		resp, httpRes, err := apiClient.OptionAPI.ProductConfiguratorUpdateOption(context.Background(), tenantId, optionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
